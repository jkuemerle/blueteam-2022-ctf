- name: API-only XSS
  description: >-
    Perform a <i>persisted</i> XSS attack with <code>&lt;iframe
    src="javascript:alert(&#x60;xss&#x60;)"&gt;</code> without using the
    frontend application at all. <em>(This challenge is <strong>not
    available</strong> on Docker!)</em> (Difficulty Level: 3)
  max_attempts: 0
  value: 450
  category: XSS
  type: standard
  state: visible
  flags:
    - type: static
      content: f94113c07b6e82fa8ba90369088818711423838a
      data: null
  hints:
    - type: standard
      content: >-
        You need to work with the server-side API directly. Try different HTTP
        verbs on different entities exposed through the API.
      cost: 45
    - type: standard
      content: |-
        <pre><code>ngAfterViewInit () {
            const products = this.productService.search('')
            const quantities = this.quantityService.getAll()
            forkJoin([quantities, products]).subscribe(([quantities, products]) => {
              const dataTable: TableEntry[] = []
              this.tableData = products
              this.trustProductDescription(products)
              for (const product of products) {
                dataTable.push({
                  name: product.name,
                  price: product.price,
                  deluxePrice: product.deluxePrice,
                  id: product.id,
                  image: product.image,
                  description: product.description
                })
              }
              for (const quantity of quantities) {
                const entry = dataTable.find((dataTableEntry) => {
                  return dataTableEntry.id === quantity.ProductId
                })
                if (entry === undefined) {
                  continue
                }
                entry.quantity = quantity.quantity
              }
              this.dataSource = new MatTableDataSource<TableEntry>(dataTable)
              for (let i = 1; i <= Math.ceil(this.dataSource.data.length / 12); i++) {
                this.pageSizeOptions.push(i * 12)
              }
              this.paginator.pageSizeOptions = this.pageSizeOptions
              this.dataSource.paginator = this.paginator
              this.gridDataSource = this.dataSource.connect()
              this.resultsLength = this.dataSource.data.length
              this.filterTable()
              this.routerSubscription = this.router.events.subscribe(() => {
                this.filterTable()
              })
              if (window.innerWidth < 2600) {
                this.breakpoint = 4
                if (window.innerWidth < 1740) {
                  this.breakpoint = 3
                  if (window.innerWidth < 1280) {
                    this.breakpoint = 2
                    if (window.innerWidth < 850) {
                      this.breakpoint = 1
                    }
                  }
                }
              } else {
                this.breakpoint = 6
              }
              this.cdRef.detectChanges()
            }, (err) => console.log(err))
          }

          trustProductDescription (tableData: any[]) {
            for (let i = 0; i < tableData.length; i++) {
              tableData[i].description = this.sanitizer.bypassSecurityTrustHtml(tableData[i].description)
            }
          }</code></pre>
      cost: 135
- name: Access Log
  description: 'Gain access to any access log file of the server. (Difficulty Level: 4)'
  max_attempts: 0
  value: 700
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: ba33e22ac92492931305ea3483a3a0c8210e9ddb
      data: null
  hints:
    - type: standard
      content: >-
        Who would want a server access log to be accessible through a web
        application?
      cost: 70
    - type: standard
      content: |-
        <pre><code>/* /ftp directory browsing and file download */
          app.use('/ftp', serveIndexMiddleware, serveIndex('ftp', { icons: true }))
          app.use('/ftp(?!/quarantine)/:file', fileServer())
          app.use('/ftp/quarantine/:file', quarantineServer())

          /* /encryptionkeys directory browsing */
          app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view: 'details' }))
          app.use('/encryptionkeys/:file', keyServer())

          /* /logs directory browsing */
          app.use('/support/logs', serveIndexMiddleware, serveIndex('logs', { icons: true, view: 'details' }))
          app.use('/support/logs/:file', logFileServer())

          /* Swagger documentation for B2B v2 endpoints */
          app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerDocument))

          app.use(express.static(path.resolve('frontend/dist/frontend')))
          app.use(cookieParser('kekse'))</code></pre>
      cost: 210
- name: Admin Registration
  description: 'Register as a user with administrator privileges. (Difficulty Level: 3)'
  max_attempts: 0
  value: 450
  category: Improper Input Validation
  type: standard
  state: visible
  flags:
    - type: static
      content: adf858a9828123061257cba29e3f34da87b23962
      data: null
  hints:
    - type: standard
      content: You have to assign the unassignable.
      cost: 45
    - type: standard
      content: |-
        <pre><code>/* Generated API endpoints */
          finale.initialize({ app, sequelize })

          const autoModels = [
            { name: 'User', exclude: ['password', 'totpSecret'], model: UserModel },
            { name: 'Product', exclude: [], model: ProductModel },
            { name: 'Feedback', exclude: [], model: FeedbackModel },
            { name: 'BasketItem', exclude: [], model: BasketItemModel },
            { name: 'Challenge', exclude: [], model: ChallengeModel },
            { name: 'Complaint', exclude: [], model: ComplaintModel },
            { name: 'Recycle', exclude: [], model: RecycleModel },
            { name: 'SecurityQuestion', exclude: [], model: SecurityQuestionModel },
            { name: 'SecurityAnswer', exclude: [], model: SecurityAnswerModel },
            { name: 'Address', exclude: [], model: AddressModel },
            { name: 'PrivacyRequest', exclude: [], model: PrivacyRequestModel },
            { name: 'Card', exclude: [], model: CardModel },
            { name: 'Quantity', exclude: [], model: QuantityModel }
          ]

          for (const { name, exclude, model } of autoModels) {
            const resource = finale.resource({
              model,
              endpoints: [`/api/${name}s`, `/api/${name}s/:id`],
              excludeAttributes: exclude
            })

            // create a wallet when a new user is registered using API
            if (name === 'User') {
              resource.create.send.before((req: Request, res: Response, context: { instance: { id: any }, continue: any }) => {
                WalletModel.create({ UserId: context.instance.id }).catch((err: unknown) => {
                  console.log(err)
                })
                return context.continue
              })
            }</code></pre>
      cost: 135
- name: Admin Section
  description: 'Access the administration section of the store. (Difficulty Level: 2)'
  max_attempts: 0
  value: 250
  category: Broken Access Control
  type: standard
  state: visible
  flags:
    - type: static
      content: 71aeb3b0bf01cc6e488f0207bb62f79b41454a87
      data: null
  hints:
    - type: standard
      content: It is just slightly harder to find than the score board link.
      cost: 25
    - type: standard
      content: |-
        <pre><code>const routes: Routes = [
          {
            path: 'administration',
            component: AdministrationComponent,
            canActivate: [AdminGuard]
          },
          {
            path: 'accounting',
            component: AccountingComponent,
            canActivate: [AccountingGuard]
          },
          {
            path: 'about',
            component: AboutComponent
          },
          {
            path: 'address/select',
            component: AddressSelectComponent,
            canActivate: [LoginGuard]
          },
          {
            path: 'address/saved',
            component: SavedAddressComponent,
            canActivate: [LoginGuard]
          },
          {
            path: 'address/create',
            component: AddressCreateComponent,
            canActivate: [LoginGuard]
          },
          {
            path: 'address/edit/:addressId',
            component: AddressCreateComponent,
            canActivate: [LoginGuard]
          },
          {
            path: 'delivery-method',
            component: DeliveryMethodComponent
          },
          {
            path: 'deluxe-membership',
            component: DeluxeUserComponent,
            canActivate: [LoginGuard]
          },
          {
            path: 'saved-payment-methods',
            component: SavedPaymentMethodsComponent
          },
          {
            path: 'basket',
            component: BasketComponent
          },
          {
            path: 'order-completion/:id',
            component: OrderCompletionComponent
          },
          {
            path: 'contact',
            component: ContactComponent
          },
          {
            path: 'photo-wall',
            component: PhotoWallComponent
          },
          {
            path: 'complain',
            component: ComplaintComponent
          },
          {
            path: 'chatbot',
            component: ChatbotComponent
          },
          {
            path: 'order-summary',
            component: OrderSummaryComponent
          },
          {
            path: 'order-history',
            component: OrderHistoryComponent
          },
          {
            path: 'payment/:entity',
            component: PaymentComponent
          },
          {
            path: 'wallet',
            component: WalletComponent
          },
          {
            path: 'login',
            component: LoginComponent
          },
          {
            path: 'forgot-password',
            component: ForgotPasswordComponent
          },
          {
            path: 'recycle',
            component: RecycleComponent
          },
          {
            path: 'register',
            component: RegisterComponent
          },
          {
            path: 'search',
            component: SearchResultComponent
          },
          {
            path: 'hacking-instructor',
            component: SearchResultComponent
          },
          {
            path: 'score-board',
            component: ScoreBoardComponent
          },
          {
            path: 'track-result',
            component: TrackResultComponent
          },
          {
            path: 'track-result/new',
            component: TrackResultComponent,
            data: {
              type: 'new'
            }
          },
          {
            path: '2fa/enter',
            component: TwoFactorAuthEnterComponent
          },
          {
            path: 'privacy-security',
            component: PrivacySecurityComponent,
            children: [
              {
                path: 'privacy-policy',
                component: PrivacyPolicyComponent
              },
              {
                path: 'change-password',
                component: ChangePasswordComponent
              },
              {
                path: 'two-factor-authentication',
                component: TwoFactorAuthComponent
              },
              {
                path: 'data-export',
                component: DataExportComponent
              },
              {
                path: 'last-login-ip',
                component: LastLoginIpComponent
              }
            ]
          },
           {
            matcher: oauthMatcher,
            data: { params: (window.location.href).substr(window.location.href.indexOf('#')) },
            component: OAuthComponent
          },
          {
            matcher: tokenMatcher,
            component: TokenSaleComponent
          },
          {
            path: '403',
            component: ErrorPageComponent
          },
          {
            path: '**',
            component: SearchResultComponent
          }
        ]</code></pre>
      cost: 75
- name: Arbitrary File Write
  description: >-
    Overwrite the <a href="/ftp/legal.md">Legal Information</a> file. <em>(This
    challenge is <strong>not available</strong> on Docker!)</em> (Difficulty
    Level: 6)
  max_attempts: 0
  value: 1350
  category: Vulnerable Components
  type: standard
  state: visible
  flags:
    - type: static
      content: 7aec1a1f170062a5dc7f9d3502de999df9ff29df
      data: null
  hints:
    - type: standard
      content: >-
        Look out for a tweet praising new functionality of the web shop. Then
        find a third party vulnerability associated with it.
      cost: 135
- name: Bjoern's Favorite Pet
  description: >-
    Reset the password of Bjoern's OWASP account via the <a
    href="/#/forgot-password">Forgot Password</a> mechanism with <i>the original
    answer</i> to his security question. (Difficulty Level: 3)
  max_attempts: 0
  value: 450
  category: Broken Authentication
  type: standard
  state: visible
  flags:
    - type: static
      content: f88dde9f00ed45debda603f5efb317933809dee3
      data: null
  hints:
    - type: standard
      content: >-
        He might have spoilered it on at least one occasion where a camera was
        running. Maybe elsewhere as well.
      cost: 45
    - type: standard
      content: |-
        <pre><code>-
          question: 'Your eldest siblings middle name?'
        -
          question: "Mother's maiden name?"
        -
          question: "Mother's birth date? (MM/DD/YY)"
        -
          question: "Father's birth date? (MM/DD/YY)"
        -
          question: "Maternal grandmother's first name?"
        -
          question: "Paternal grandmother's first name?"
        -
          question: 'Name of your favorite pet?'
        -
          question: "Last name of dentist when you were a teenager? (Do not include 'Dr.')"
        -
          question: 'Your ZIP/postal code when you were a teenager?'
        -
          question: 'Company you first work for as an adult?'
        -
          question: 'Your favorite book?'
        -
          question: 'Your favorite movie?'
        -
          question: 'Number of one of your customer or ID cards?'
        -
          question: "What's your favorite place to go hiking?"</code></pre>
      cost: 135
- name: Blockchain Hype
  description: >-
    Learn about the Token Sale before its official announcement. (Difficulty
    Level: 5)
  max_attempts: 0
  value: 1000
  category: Security through Obscurity
  type: standard
  state: visible
  flags:
    - type: static
      content: 6f1a6427a4eb7cd7861eec9c75b4bd18ee5b9d9f
      data: null
  hints:
    - type: standard
      content: >-
        The developers truly believe in "Security through Obscurity" over actual
        access restrictions.
      cost: 100
    - type: standard
      content: >-
        <pre><code>{
            matcher: oauthMatcher,
            data: { params: (window.location.href).substr(window.location.href.indexOf('#')) },
            component: OAuthComponent
          },
          {
            matcher: tokenMatcher,
            component: TokenSaleComponent
          },
          {
            path: '403',
            component: ErrorPageComponent
          },
          {
            path: '**',
            component: SearchResultComponent
          }
        ]


        export const Routing = RouterModule.forRoot(routes, { useHash: true,
        relativeLinkResolution: 'legacy' })


        export function oauthMatcher (url: UrlSegment[]): UrlMatchResult {
          if (url.length === 0) {
            return null as unknown as UrlMatchResult
          }
          const path = window.location.href
          if (path.includes('#access_token=')) {
            return ({ consumed: url })
          }

          return null as unknown as UrlMatchResult
        }


        export function tokenMatcher (url: UrlSegment[]): UrlMatchResult {
          if (url.length === 0) {
            return null as unknown as UrlMatchResult
          }
         
          const path = url[0].toString()
          // eslint-disable-next-line @typescript-eslint/restrict-plus-operands
          if (path.match((token1(25, 184, 174, 179, 182, 186) + (36669).toString(36).toLowerCase() + token2(13, 144, 87, 152, 139, 144, 83, 138) + (10).toString(36).toLowerCase()))) {
            return ({ consumed: url })
          }
         
          return null as unknown as UrlMatchResult
        }


        export function token1 (...args: number[]) {
          const L = Array.prototype.slice.call(args)
          const D = L.shift()
          return L.reverse().map(function (C, A) {
            return String.fromCharCode(C - D - 45 - A)
          }).join('')
        }


        export function token2 (...args: number[]) {
          const T = Array.prototype.slice.call(arguments)
          const M = T.shift()
          return T.reverse().map(function (m, H) {
            return String.fromCharCode(m - M - 24 - H)
          }).join('')
        }</code></pre>
      cost: 300
- name: Blocked RCE DoS
  description: >-
    Perform a Remote Code Execution that would keep a less hardened application
    busy <em>forever</em>. <em>(This challenge is <strong>not available</strong>
    on Docker!)</em> (Difficulty Level: 5)
  max_attempts: 0
  value: 1000
  category: Insecure Deserialization
  type: standard
  state: visible
  flags:
    - type: static
      content: f794e88774087c775e300beda3c0b4cd797c269b
      data: null
  hints:
    - type: standard
      content: >-
        The feature you need to exploit for this challenge is not directly
        advertised anywhere.
      cost: 100
- name: CAPTCHA Bypass
  description: >-
    Submit 10 or more customer feedbacks within 20 seconds. (Difficulty Level:
    3)
  max_attempts: 0
  value: 450
  category: Broken Anti Automation
  type: standard
  state: visible
  flags:
    - type: static
      content: 0444f13ce4a5580cf6a6219ea19e2c89b7cd1d1f
      data: null
  hints:
    - type: standard
      content: >-
        After finding a CAPTCHA bypass, write a script that automates feedback
        submission. Or open many browser tabs and be really quick.
      cost: 45
- name: Change Bender's Password
  description: >-
    Change Bender's password into <i>slurmCl4ssic</i> without using SQL
    Injection or Forgot Password. (Difficulty Level: 5)
  max_attempts: 0
  value: 1000
  category: Broken Authentication
  type: standard
  state: visible
  flags:
    - type: static
      content: cec8dcc2d125c262c9434637ce7d4e834cf0a0d8
      data: null
  hints:
    - type: standard
      content: >-
        In previous releases this challenge was wrongly accused of being based
        on CSRF.
      cost: 100
- name: Christmas Special
  description: 'Order the Christmas special offer of 2014. (Difficulty Level: 4)'
  max_attempts: 0
  value: 700
  category: Injection
  type: standard
  state: visible
  flags:
    - type: static
      content: 929646db81fdde9492b64f2d3c5fa0a3da182ad7
      data: null
  hints:
    - type: standard
      content: >-
        Find out how the application handles unavailable products and try to
        find a loophole.
      cost: 70
- name: CSP Bypass
  description: >-
    Bypass the Content Security Policy and perform an XSS attack with
    <code>&lt;script&gt;alert(&#x60;xss&#x60;)&lt;/script&gt;</code> on a legacy
    page within the application. <em>(This challenge is <strong>not
    available</strong> on Docker!)</em> (Difficulty Level: 4)
  max_attempts: 0
  value: 700
  category: XSS
  type: standard
  state: visible
  flags:
    - type: static
      content: 64dec3daf0a02d4697c5fec917b8ad25862d4181
      data: null
  hints:
    - type: standard
      content: >-
        What is even "better" than a legacy page with a homegrown RegEx
        sanitizer? Having CSP injection issues on the exact same page as well!
      cost: 70
- name: Client-side XSS Protection
  description: >-
    Perform a <i>persisted</i> XSS attack with <code>&lt;iframe
    src="javascript:alert(&#x60;xss&#x60;)"&gt;</code> bypassing a
    <i>client-side</i> security mechanism. <em>(This challenge is <strong>not
    available</strong> on Docker!)</em> (Difficulty Level: 3)
  max_attempts: 0
  value: 450
  category: XSS
  type: standard
  state: visible
  flags:
    - type: static
      content: 237fc9b7b8c04174abe71483de6eb53c04fe9e90
      data: null
  hints:
    - type: standard
      content: >-
        Only some input fields validate their input. Even less of these are
        persisted in a way where their content is shown on another screen.
      cost: 45
- name: Confidential Document
  description: 'Access a confidential document. (Difficulty Level: 1)'
  max_attempts: 0
  value: 100
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: 8d2072c6b0a455608ca1a293dc0c9579883fc6a5
      data: null
  hints:
    - type: standard
      content: >-
        Analyze and tamper with links in the application that deliver a file
        directly.
      cost: 10
    - type: standard
      content: |-
        <pre><code>/* /ftp directory browsing and file download */
          app.use('/ftp', serveIndexMiddleware, serveIndex('ftp', { icons: true }))
          app.use('/ftp(?!/quarantine)/:file', fileServer())
          app.use('/ftp/quarantine/:file', quarantineServer())

          /* /encryptionkeys directory browsing */
          app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view: 'details' }))
          app.use('/encryptionkeys/:file', keyServer())

          /* /logs directory browsing */
          app.use('/support/logs', serveIndexMiddleware, serveIndex('logs', { icons: true, view: 'details' }))
          app.use('/support/logs/:file', logFileServer())

          /* Swagger documentation for B2B v2 endpoints */
          app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerDocument))

          app.use(express.static(path.resolve('frontend/dist/frontend')))
          app.use(cookieParser('kekse'))</code></pre>
      cost: 30
- name: DOM XSS
  description: >-
    Perform a <i>DOM</i> XSS attack with <code>&lt;iframe
    src="javascript:alert(&#x60;xss&#x60;)"&gt;</code>. (Difficulty Level: 1)
  max_attempts: 0
  value: 100
  category: XSS
  type: standard
  state: visible
  flags:
    - type: static
      content: 4a31a4fe0954199566e360a873802bf64d0d0a84
      data: null
  hints:
    - type: standard
      content: >-
        Look for an input field where its content appears in the HTML when its
        form is submitted.
      cost: 10
    - type: standard
      content: |-
        <pre><code>filterTable () {
            let queryParam: string = this.route.snapshot.queryParams.q
            if (queryParam) {
              queryParam = queryParam.trim()
              this.dataSource.filter = queryParam.toLowerCase()
              this.searchValue = this.sanitizer.bypassSecurityTrustHtml(queryParam)
              this.gridDataSource.subscribe((result: any) => {
                if (result.length === 0) {
                  this.emptyState = true
                } else {
                  this.emptyState = false
                }
              })
            } else {
              this.dataSource.filter = ''
              this.searchValue = undefined
              this.emptyState = false
            }
          }</code></pre>
      cost: 30
- name: Database Schema
  description: >-
    Exfiltrate the entire DB schema definition via SQL Injection. (Difficulty
    Level: 3)
  max_attempts: 0
  value: 450
  category: Injection
  type: standard
  state: visible
  flags:
    - type: static
      content: 1131456a55e84fbe58f6db03c9895921c1db5b3e
      data: null
  hints:
    - type: standard
      content: >-
        Find out where this information could come from. Then craft a UNION
        SELECT attack string against an endpoint that offers an unnecessary way
        to filter data.
      cost: 45
    - type: standard
      content: |-
        <pre><code>module.exports = function searchProducts () {
          return (req: Request, res: Response, next: NextFunction) => {
            let criteria: any = req.query.q === 'undefined' ? '' : req.query.q ?? ''
            criteria = (criteria.length <= 200) ? criteria : criteria.substring(0, 200)
            models.sequelize.query(`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`)
              .then(([products]: any) => {
                const dataString = JSON.stringify(products)
                for (let i = 0; i < products.length; i++) {
                  products[i].name = req.__(products[i].name)
                  products[i].description = req.__(products[i].description)
                }
                res.json(utils.queryResultToJson(products))
              }).catch((error: ErrorWithParent) => {
                next(error.parent)
              })
          }
        }</code></pre>
      cost: 135
- name: Deprecated Interface
  description: >-
    Use a deprecated B2B interface that was not properly shut down. (Difficulty
    Level: 2)
  max_attempts: 0
  value: 250
  category: Security Misconfiguration
  type: standard
  state: visible
  flags:
    - type: static
      content: 5fd213c8fc772846b262c307eaaa901340a195bb
      data: null
  hints:
    - type: standard
      content: >-
        The developers who disabled the interface think they could go invisible
        by just closing their eyes.
      cost: 25
- name: Easter Egg
  description: >-
    Find the hidden <a href="http://en.wikipedia.org/wiki/Easter_egg_(media)"
    target="_blank">easter egg</a>. (Difficulty Level: 4)
  max_attempts: 0
  value: 700
  category: Broken Access Control
  type: standard
  state: visible
  flags:
    - type: static
      content: 87af1696e5207d68cd40df414a1805fbdc233024
      data: null
  hints:
    - type: standard
      content: >-
        If you solved one of the three file access challenges, you already know
        where to find the easter egg.
      cost: 70
- name: Email Leak
  description: >-
    Perform an unwanted information disclosure by accessing data cross-domain.
    (Difficulty Level: 5)
  max_attempts: 0
  value: 1000
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: dc09eb2b8517008ab65730f7355443a7f4bc8326
      data: null
  hints:
    - type: standard
      content: >-
        Try to find and attack an endpoint that responds with user information.
        SQL Injection is not the solution here.
      cost: 100
- name: Ephemeral Accountant
  description: >-
    Log in with the (non-existing) accountant <i>acc0unt4nt@juice-sh.op</i>
    without ever registering that user. (Difficulty Level: 4)
  max_attempts: 0
  value: 700
  category: Injection
  type: standard
  state: visible
  flags:
    - type: static
      content: 9b65e390a97a9a39d0d597ab89a77179b0a7cac4
      data: null
  hints:
    - type: standard
      content: Try to create the needed user "out of thin air".
      cost: 70
- name: Error Handling
  description: >-
    Provoke an error that is neither very gracefully nor consistently handled.
    (Difficulty Level: 1)
  max_attempts: 0
  value: 100
  category: Security Misconfiguration
  type: standard
  state: visible
  flags:
    - type: static
      content: 9c297196ecf8890bc1e900fcf3aebae8c9f9880a
      data: null
  hints:
    - type: standard
      content: >-
        Try to submit bad input to forms. Alternatively tamper with URL paths or
        parameters.
      cost: 10
- name: Expired Coupon
  description: 'Successfully redeem an expired campaign coupon code. (Difficulty Level: 4)'
  max_attempts: 0
  value: 700
  category: Improper Input Validation
  type: standard
  state: visible
  flags:
    - type: static
      content: 12703f16a02e150ef92de329ce57539e53c6aac7
      data: null
  hints:
    - type: standard
      content: >-
        Try to identify past special event or holiday campaigns of the shop
        first.
      cost: 70
- name: Extra Language
  description: >-
    Retrieve the language file that never made it into production. (Difficulty
    Level: 5)
  max_attempts: 0
  value: 1000
  category: Broken Anti Automation
  type: standard
  state: visible
  flags:
    - type: static
      content: 9bb1be0fc245910b356fdac4e78e315d58d810af
      data: null
  hints:
    - type: standard
      content: >-
        Brute force is not the only option for this challenge, but a perfectly
        viable one.
      cost: 100
- name: Five-Star Feedback
  description: 'Get rid of all 5-star customer feedback. (Difficulty Level: 2)'
  max_attempts: 0
  value: 250
  category: Broken Access Control
  type: standard
  state: visible
  flags:
    - type: static
      content: 78231b75c0b2180b7e964dcbb1ab3c3f58639f2e
      data: null
  hints:
    - type: standard
      content: >-
        Once you found admin section of the application, this challenge is
        almost trivial.
      cost: 25
- name: Forged Coupon
  description: >-
    Forge a coupon code that gives you a discount of at least 80%. (Difficulty
    Level: 6)
  max_attempts: 0
  value: 1350
  category: Cryptographic Issues
  type: standard
  state: visible
  flags:
    - type: static
      content: 10e04eb4104bd61f5fafc77c844d4d70b3f33f08
      data: null
  hints:
    - type: standard
      content: >-
        Try either a) a knowledgable brute force attack or b) reverse
        engineering or c) some research in the cloud.
      cost: 135
- name: Forged Feedback
  description: 'Post some feedback in another user''s name. (Difficulty Level: 3)'
  max_attempts: 0
  value: 450
  category: Broken Access Control
  type: standard
  state: visible
  flags:
    - type: static
      content: b3245d86c5b5a6e10a1319aebced515c1763b754
      data: null
  hints:
    - type: standard
      content: >-
        You can solve this by tampering with the user interface or by
        intercepting the communication with the RESTful backend.
      cost: 45
- name: Forged Review
  description: >-
    Post a product review as another user or edit any user's existing review.
    (Difficulty Level: 3)
  max_attempts: 0
  value: 450
  category: Broken Access Control
  type: standard
  state: visible
  flags:
    - type: static
      content: 2d542917ab9cd27314b53b9c85f956af461a550d
      data: null
  hints:
    - type: standard
      content: >-
        Observe the flow of product review posting and editing and see if you
        can exploit it.
      cost: 45
    - type: standard
      content: |-
        <pre><code>module.exports = function productReviews () {
          return (req: Request, res: Response, next: NextFunction) => {
            const user = security.authenticatedUsers.from(req)
            db.reviews.update(
              { _id: req.body.id },
              { $set: { message: req.body.message } },
              { multi: true }
            ).then(
              (result: { modified: number, original: Array<{ author: any }> }) => {
                res.json(result)
              }, (err: unknown) => {
                res.status(500).json(err)
              })
          }
        }</code></pre>
      cost: 135
- name: Forged Signed JWT
  description: >-
    Forge an almost properly RSA-signed JWT token that impersonates the
    (non-existing) user <i>rsa_lord@juice-sh.op</i>. (Difficulty Level: 6)
  max_attempts: 0
  value: 1350
  category: Vulnerable Components
  type: standard
  state: visible
  flags:
    - type: static
      content: b333748beae429d9459da79ef6b1c4ba492f69e9
      data: null
  hints:
    - type: standard
      content: >-
        This challenge is explicitly not about acquiring the RSA private key
        used for JWT signing.
      cost: 135
- name: Forgotten Developer Backup
  description: 'Access a developer''s forgotten backup file. (Difficulty Level: 4)'
  max_attempts: 0
  value: 700
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: dad737329153068527159005db4eb139e86e76ba
      data: null
  hints:
    - type: standard
      content: >-
        You need to trick a security mechanism into thinking that the file you
        want has a valid file type.
      cost: 70
- name: Forgotten Sales Backup
  description: 'Access a salesman''s forgotten backup file. (Difficulty Level: 4)'
  max_attempts: 0
  value: 700
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: 9854fa972c745fa0e8a55f0687528b1f483856b1
      data: null
  hints:
    - type: standard
      content: >-
        You need to trick a security mechanism into thinking that the file you
        want has a valid file type.
      cost: 70
- name: Frontend Typosquatting
  description: >-
    <a href="/#/contact">Inform the shop</a> about a <i>typosquatting</i>
    imposter that dug itself deep into the frontend. (Mention the exact name of
    the culprit) (Difficulty Level: 5)
  max_attempts: 0
  value: 1000
  category: Vulnerable Components
  type: standard
  state: visible
  flags:
    - type: static
      content: 5d88f4080ce3baa81f32621d3a3440c8c718a302
      data: null
  hints:
    - type: standard
      content: >-
        This challenge has nothing to do with mistyping web domains. There is no
        conveniently misplaced file helping you with this one either. Or is
        there?
      cost: 100
- name: GDPR Data Erasure
  description: 'Log in with Chris'' erased user account. (Difficulty Level: 3)'
  max_attempts: 0
  value: 450
  category: Broken Authentication
  type: standard
  state: visible
  flags:
    - type: static
      content: 22ed55ea33b596ba50c67235264769e28d5272b3
      data: null
  hints:
    - type: standard
      content: >-
        Turns out that something is technically and legally wrong with the
        implementation of the "right to be forgotten" for users.
      cost: 45
- name: GDPR Data Theft
  description: >-
    Steal someone else's personal data without using Injection. (Difficulty
    Level: 4)
  max_attempts: 0
  value: 700
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: 4e606bcbc4a3ddb154a1e296cba3dca34889a5be
      data: null
  hints:
    - type: standard
      content: >-
        Trick the regular Data Export to give you more than actually belongs to
        you.
      cost: 70
- name: HTTP-Header XSS
  description: >-
    Perform a <i>persisted</i> XSS attack with <code>&lt;iframe
    src="javascript:alert(&#x60;xss&#x60;)"&gt;</code> through an HTTP header.
    <em>(This challenge is <strong>not available</strong> on Docker!)</em>
    (Difficulty Level: 4)
  max_attempts: 0
  value: 700
  category: XSS
  type: standard
  state: visible
  flags:
    - type: static
      content: c37da14686b69a220fd9febd09bb9593e7d0539f
      data: null
  hints:
    - type: standard
      content: >-
        Finding a piece of displayed information that could originate from an
        HTTP header is part of this challenge.
      cost: 70
- name: Imaginary Challenge
  description: >-
    Solve challenge #999. Unfortunately, this challenge does not exist.
    (Difficulty Level: 6)
  max_attempts: 0
  value: 1350
  category: Cryptographic Issues
  type: standard
  state: visible
  flags:
    - type: static
      content: 3eb1eb054dc55a13772007ac980ca5bf310ee773
      data: null
  hints:
    - type: standard
      content: >-
        You need to trick the hacking progress persistence feature into thinking
        you solved challenge #999.
      cost: 135
- name: Leaked Access Logs
  description: >-
    Dumpster dive the Internet for a leaked password and log in to the original
    user account it belongs to. (Creating a new account with the same password
    does not qualify as a solution.) (Difficulty Level: 5)
  max_attempts: 0
  value: 1000
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: 0d81e34249c9ae82ba80693a26b4e2bdb1f764f0
      data: null
  hints:
    - type: standard
      content: >-
        Once you have it, a technique called "Password Spraying" might prove
        useful.
      cost: 100
- name: Leaked Unsafe Product
  description: >-
    Identify an unsafe product that was removed from the shop and <a
    href="/#/contact">inform the shop</a> which ingredients are dangerous.
    (Difficulty Level: 4)
  max_attempts: 0
  value: 700
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: 19ebb3402eb75df18d076bd6a15ed1521d36e306
      data: null
  hints:
    - type: standard
      content: >-
        Your own SQLi and someone else's Ctrl-V will be your accomplices in this
        challenge!
      cost: 70
- name: Legacy Typosquatting
  description: >-
    <a href="/#/contact">Inform the shop</a> about a <i>typosquatting</i> trick
    it has been a victim of at least in <code>v6.2.0-SNAPSHOT</code>. (Mention
    the exact name of the culprit) (Difficulty Level: 4)
  max_attempts: 0
  value: 700
  category: Vulnerable Components
  type: standard
  state: visible
  flags:
    - type: static
      content: b01a1ae56491c0c3d6b8d6e0264d099bda573758
      data: null
  hints:
    - type: standard
      content: >-
        This challenge has nothing to do with mistyping web domains. Investigate
        the forgotten developer's backup file instead.
      cost: 70
- name: Login Admin
  description: 'Log in with the administrator''s user account. (Difficulty Level: 2)'
  max_attempts: 0
  value: 250
  category: Injection
  type: standard
  state: visible
  flags:
    - type: static
      content: 690fa3247a99d651e0b26f947baf0b79b4f404a9
      data: null
  hints:
    - type: standard
      content: >-
        Try different SQL Injection attack patterns depending whether you know
        the admin's email address or not.
      cost: 25
    - type: standard
      content: |-
        <pre><code>module.exports = function login () {
          function afterLogin (user: { data: User, bid: number }, res: Response, next: NextFunction) {
            BasketModel.findOrCreate({ where: { UserId: user.data.id } })
              .then(([basket]: [BasketModel, boolean]) => {
                const token = security.authorize(user)
                user.bid = basket.id // keep track of original basket
                security.authenticatedUsers.put(token, user)
                res.json({ authentication: { token, bid: basket.id, umail: user.data.email } })
              }).catch((error: Error) => {
                next(error)
              })
          }

          return (req: Request, res: Response, next: NextFunction) => {
            models.sequelize.query(`SELECT * FROM Users WHERE email = '${req.body.email || ''}' AND password = '${security.hash(req.body.password || '')}' AND deletedAt IS NULL`, { model: UserModel, plain: true })
              .then((authenticatedUser: { data: User }) => {
                const user = utils.queryResultToJson(authenticatedUser)
                if (user.data?.id && user.data.totpSecret !== '') {
                  res.status(401).json({
                    status: 'totp_token_required',
                    data: {
                      tmpToken: security.authorize({
                        userId: user.data.id,
                        type: 'password_valid_needs_second_factor_token'
                      })
                    }
                  })
                } else if (user.data?.id) {
                  afterLogin(user, res, next)
                } else {
                  res.status(401).send(res.__('Invalid email or password.'))
                }
              }).catch((error: Error) => {
                next(error)
              })
          }</code></pre>
      cost: 75
- name: Login Amy
  description: >-
    Log in with Amy's original user credentials. (This could take 93.83 billion
    trillion trillion centuries to brute force, but luckily she did not read the
    "One Important Final Note") (Difficulty Level: 3)
  max_attempts: 0
  value: 450
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: 5444962659bf8d72f6322530b18d6b9123fbaeec
      data: null
  hints:
    - type: standard
      content: This challenge will make you go after a needle in a haystack.
      cost: 45
- name: Login Bender
  description: 'Log in with Bender''s user account. (Difficulty Level: 3)'
  max_attempts: 0
  value: 450
  category: Injection
  type: standard
  state: visible
  flags:
    - type: static
      content: 5ff5052e879e6fef64124e64c82c84ebc809c6c4
      data: null
  hints:
    - type: standard
      content: >-
        If you know Bender's email address, try SQL Injection. Bender's password
        hash might not help you very much.
      cost: 45
    - type: standard
      content: |-
        <pre><code>module.exports = function login () {
          function afterLogin (user: { data: User, bid: number }, res: Response, next: NextFunction) {
            BasketModel.findOrCreate({ where: { UserId: user.data.id } })
              .then(([basket]: [BasketModel, boolean]) => {
                const token = security.authorize(user)
                user.bid = basket.id // keep track of original basket
                security.authenticatedUsers.put(token, user)
                res.json({ authentication: { token, bid: basket.id, umail: user.data.email } })
              }).catch((error: Error) => {
                next(error)
              })
          }

          return (req: Request, res: Response, next: NextFunction) => {
            models.sequelize.query(`SELECT * FROM Users WHERE email = '${req.body.email || ''}' AND password = '${security.hash(req.body.password || '')}' AND deletedAt IS NULL`, { model: UserModel, plain: true })
              .then((authenticatedUser: { data: User }) => {
                const user = utils.queryResultToJson(authenticatedUser)
                if (user.data?.id && user.data.totpSecret !== '') {
                  res.status(401).json({
                    status: 'totp_token_required',
                    data: {
                      tmpToken: security.authorize({
                        userId: user.data.id,
                        type: 'password_valid_needs_second_factor_token'
                      })
                    }
                  })
                } else if (user.data?.id) {
                  afterLogin(user, res, next)
                } else {
                  res.status(401).send(res.__('Invalid email or password.'))
                }
              }).catch((error: Error) => {
                next(error)
              })
          }</code></pre>
      cost: 135
- name: Login Bjoern
  description: >-
    Log in with Bjoern's Gmail account <i>without</i> previously changing his
    password, applying SQL Injection, or hacking his Google account. (Difficulty
    Level: 4)
  max_attempts: 0
  value: 700
  category: Broken Authentication
  type: standard
  state: visible
  flags:
    - type: static
      content: 5fb1dbd45670d209e1c48ed59222c2bca732d354
      data: null
  hints:
    - type: standard
      content: >-
        The security flaw behind this challenge is 100% OWASP Juice Shop's fault
        and 0% Google's.
      cost: 70
- name: Login Jim
  description: 'Log in with Jim''s user account. (Difficulty Level: 3)'
  max_attempts: 0
  value: 450
  category: Injection
  type: standard
  state: visible
  flags:
    - type: static
      content: de0806c1e34a5783b4b1672fa4eed440a9912378
      data: null
  hints:
    - type: standard
      content: >-
        Try cracking Jim's password hash if you harvested it already.
        Alternatively, if you know Jim's email address, try SQL Injection.
      cost: 45
    - type: standard
      content: |-
        <pre><code>module.exports = function login () {
          function afterLogin (user: { data: User, bid: number }, res: Response, next: NextFunction) {
            BasketModel.findOrCreate({ where: { UserId: user.data.id } })
              .then(([basket]: [BasketModel, boolean]) => {
                const token = security.authorize(user)
                user.bid = basket.id // keep track of original basket
                security.authenticatedUsers.put(token, user)
                res.json({ authentication: { token, bid: basket.id, umail: user.data.email } })
              }).catch((error: Error) => {
                next(error)
              })
          }

          return (req: Request, res: Response, next: NextFunction) => {
            models.sequelize.query(`SELECT * FROM Users WHERE email = '${req.body.email || ''}' AND password = '${security.hash(req.body.password || '')}' AND deletedAt IS NULL`, { model: UserModel, plain: true })
              .then((authenticatedUser: { data: User }) => {
                const user = utils.queryResultToJson(authenticatedUser)
                if (user.data?.id && user.data.totpSecret !== '') {
                  res.status(401).json({
                    status: 'totp_token_required',
                    data: {
                      tmpToken: security.authorize({
                        userId: user.data.id,
                        type: 'password_valid_needs_second_factor_token'
                      })
                    }
                  })
                } else if (user.data?.id) {
                  afterLogin(user, res, next)
                } else {
                  res.status(401).send(res.__('Invalid email or password.'))
                }
              }).catch((error: Error) => {
                next(error)
              })
          }</code></pre>
      cost: 135
- name: Login MC SafeSearch
  description: >-
    Log in with MC SafeSearch's original user credentials without applying SQL
    Injection or any other bypass. (Difficulty Level: 2)
  max_attempts: 0
  value: 250
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: bb105418e73708ceccf1a7b2491f434b8f5230e4
      data: null
  hints:
    - type: standard
      content: You should listen to MC's hit song "Protect Ya Passwordz".
      cost: 25
- name: Login Support Team
  description: >-
    Log in with the support team's original user credentials without applying
    SQL Injection or any other bypass. (Difficulty Level: 6)
  max_attempts: 0
  value: 1350
  category: Security Misconfiguration
  type: standard
  state: visible
  flags:
    - type: static
      content: 86c8986dff834112ed790d7d53dadb46e9dca210
      data: null
  hints:
    - type: standard
      content: >-
        The underlying flaw of this challenge is a lot more human error than
        technical weakness.
      cost: 135
- name: Manipulate Basket
  description: >-
    Put an additional product into another user's shopping basket. (Difficulty
    Level: 3)
  max_attempts: 0
  value: 450
  category: Broken Access Control
  type: standard
  state: visible
  flags:
    - type: static
      content: 8f4e92556e5cafa24316d3fbb482384f66a0619d
      data: null
  hints:
    - type: standard
      content: >-
        Have an eye on the HTTP traffic while placing products in the shopping
        basket. Changing the quantity of products already in the basket doesn't
        count.
      cost: 45
- name: Misplaced Signature File
  description: >-
    Access a misplaced <a href="https://github.com/Neo23x0/sigma">SIEM
    signature</a> file. (Difficulty Level: 4)
  max_attempts: 0
  value: 700
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: b9263160f81d18dc69161db7ffb8a2d622bf1755
      data: null
  hints:
    - type: standard
      content: >-
        You need to trick a security mechanism into thinking that the file you
        want has a valid file type.
      cost: 70
- name: Multiple Likes
  description: 'Like any review at least three times as the same user. (Difficulty Level: 6)'
  max_attempts: 0
  value: 1350
  category: Broken Anti Automation
  type: standard
  state: visible
  flags:
    - type: static
      content: ec7840f71a70dac3908a7ab0f8c5b58eb986e892
      data: null
  hints:
    - type: standard
      content: Punctuality is the politeness of kings.
      cost: 135
- name: Nested Easter Egg
  description: >-
    Apply some advanced cryptanalysis to find <i>the real</i> easter egg.
    (Difficulty Level: 4)
  max_attempts: 0
  value: 700
  category: Cryptographic Issues
  type: standard
  state: visible
  flags:
    - type: static
      content: 9237a0d67e49ba39ab0d85d4caecb5808806f4bb
      data: null
  hints:
    - type: standard
      content: >-
        You might have to peel through several layers of tough-as-nails
        encryption for this challenge.
      cost: 70
- name: NoSQL DoS
  description: >-
    Let the server sleep for some time. (It has done more than enough hard work
    for you) <em>(This challenge is <strong>not available</strong> on
    Docker!)</em> (Difficulty Level: 4)
  max_attempts: 0
  value: 700
  category: Injection
  type: standard
  state: visible
  flags:
    - type: static
      content: 6322a4a6cad7b7ab96fa868a706aaa11932b918e
      data: null
  hints:
    - type: standard
      content: >-
        This challenge is essentially a stripped-down Denial of Service (DoS)
        attack.
      cost: 70
- name: NoSQL Exfiltration
  description: >-
    All your orders are belong to us! Even the ones which don't. <em>(This
    challenge is <strong>not available</strong> on Docker!)</em> (Difficulty
    Level: 5)
  max_attempts: 0
  value: 1000
  category: Injection
  type: standard
  state: visible
  flags:
    - type: static
      content: e606cff6a6a895ea073e4aeb71a42eebf63a25d1
      data: null
  hints:
    - type: standard
      content: Take a close look on how the $where query operator works in MongoDB.
      cost: 100
- name: NoSQL Manipulation
  description: 'Update multiple product reviews at the same time. (Difficulty Level: 4)'
  max_attempts: 0
  value: 700
  category: Injection
  type: standard
  state: visible
  flags:
    - type: static
      content: 8388280c9e656fe7aa45e8920e36c5bfcbfa3519
      data: null
  hints:
    - type: standard
      content: >-
        Take a close look on how the equivalent of UPDATE-statements in MongoDB
        work.
      cost: 70
    - type: standard
      content: |-
        <pre><code>module.exports = function productReviews () {
          return (req: Request, res: Response, next: NextFunction) => {
            const user = security.authenticatedUsers.from(req)
            db.reviews.update(
              { _id: req.body.id },
              { $set: { message: req.body.message } },
              { multi: true }
            ).then(
              (result: { modified: number, original: Array<{ author: any }> }) => {
                res.json(result)
              }, (err: unknown) => {
                res.status(500).json(err)
              })
          }
        }</code></pre>
      cost: 210
- name: Outdated Allowlist
  description: >-
    Let us redirect you to one of our crypto currency addresses which are not
    promoted any longer. (Difficulty Level: 1)
  max_attempts: 0
  value: 100
  category: Unvalidated Redirects
  type: standard
  state: visible
  flags:
    - type: static
      content: 1ad816c82e078df250e618cba7893093115f4521
      data: null
  hints:
    - type: standard
      content: We might have failed to take this out of our code properly.
      cost: 10
    - type: standard
      content: |-
        <pre><code>const redirectAllowlist = new Set([
          'https://github.com/bkimminich/juice-shop',
          'https://blockchain.info/address/1AbKfgvw9psQ41NbLi8kufDQTezwG8DRZm',
          'https://explorer.dash.org/address/Xr556RzuwX6hg5EGpkybbv5RanJoZN17kW',
          'https://etherscan.io/address/0x0f933ab9fcaaa782d0279c300d73750e1311eae6',
          'http://shop.spreadshirt.com/juiceshop',
          'http://shop.spreadshirt.de/juiceshop',
          'https://www.stickeryou.com/products/owasp-juice-shop/794',
          'http://leanpub.com/juice-shop'
        ])
        exports.redirectAllowlist = redirectAllowlist

        exports.isRedirectAllowed = (url: string) => {
          let allowed = false
          for (const allowedUrl of redirectAllowlist) {
            allowed = allowed || url.includes(allowedUrl)
          }
          return allowed
        }</code></pre>
      cost: 30
- name: Password Strength
  description: >-
    Log in with the administrator's user credentials without previously changing
    them or applying SQL Injection. (Difficulty Level: 2)
  max_attempts: 0
  value: 250
  category: Broken Authentication
  type: standard
  state: visible
  flags:
    - type: static
      content: ff4aebffe31b0ffdea9bdd0207a16a3c01ac6c56
      data: null
  hints:
    - type: standard
      content: >-
        This one should be equally easy to a) brute force, b) crack the password
        hash or c) simply guess.
      cost: 25
- name: Payback Time
  description: 'Place an order that makes you rich. (Difficulty Level: 3)'
  max_attempts: 0
  value: 450
  category: Improper Input Validation
  type: standard
  state: visible
  flags:
    - type: static
      content: bccfc69b31482f1eaa399e6ded3cce938b9fc219
      data: null
  hints:
    - type: standard
      content: You literally need to make the shop owe you any amount of money.
      cost: 45
- name: Premium Paywall
  description: >-
    <i class="far fa-gem"></i><i class="far fa-gem"></i><i class="far
    fa-gem"></i><i class="far fa-gem"></i><i class="far
    fa-gem"></i><!--IvLuRfBJYlmStf9XfL6ckJFngyd9LfV1JaaN/KRTPQPidTuJ7FR+D/nkWJUF+0xUF07CeCeqYfxq+OJVVa0gNbqgYkUNvn//UbE7e95C+6e+7GtdpqJ8mqm4WcPvUGIUxmGLTTAC2+G9UuFCD1DUjg==-->
    <a href="https://blockchain.info/address/1AbKfgvw9psQ41NbLi8kufDQTezwG8DRZm"
    target="_blank"><i class="fab fa-btc fa-sm"></i> Unlock Premium
    Challenge</a> to access exclusive content. (Difficulty Level: 6)
  max_attempts: 0
  value: 1350
  category: Cryptographic Issues
  type: standard
  state: visible
  flags:
    - type: static
      content: 41db0b8dbceb01d9737fceb888a1f24ddd8f1dff
      data: null
  hints:
    - type: standard
      content: >-
        You do not have to pay anything to unlock this challenge! Nonetheless,
        donations are very much appreciated.
      cost: 135
- name: Privacy Policy
  description: 'Read our privacy policy. (Difficulty Level: 1)'
  max_attempts: 0
  value: 100
  category: Miscellaneous
  type: standard
  state: visible
  flags:
    - type: static
      content: 13083493dec15380f7319596e5e2bc67437ce5c4
      data: null
  hints:
    - type: standard
      content: >-
        We won't even ask you to confirm that you did. Just read it. Please.
        Pretty please.
      cost: 10
- name: Privacy Policy Inspection
  description: 'Prove that you actually read our privacy policy. (Difficulty Level: 3)'
  max_attempts: 0
  value: 450
  category: Security through Obscurity
  type: standard
  state: visible
  flags:
    - type: static
      content: 2c4ad2aa82f89b4aefcb6d305d329005b5ebbe61
      data: null
  hints:
    - type: standard
      content: >-
        Only by visiting a special URL you can confirm that you read it
        carefully.
      cost: 45
- name: Product Tampering
  description: >-
    Change the <code>href</code> of the link within the <a
    href="/#/search?q=OWASP SSL Advanced Forensic Tool (O-Saft)">OWASP SSL
    Advanced Forensic Tool (O-Saft)</a> product description into
    <i>https://owasp.slack.com</i>. (Difficulty Level: 3)
  max_attempts: 0
  value: 450
  category: Broken Access Control
  type: standard
  state: visible
  flags:
    - type: static
      content: 7513f97578391e85282583fd084bc3a649f1d25f
      data: null
  hints:
    - type: standard
      content: >-
        Look for one of the following: a) broken admin functionality, b) holes
        in RESTful API or c) possibility for SQL Injection.
      cost: 45
    - type: standard
      content: |-
        <pre><code>/** Authorization **/
          /* Baskets: Unauthorized users are not allowed to access baskets */
          app.use('/rest/basket', security.isAuthorized(), security.appendUserId())
          /* BasketItems: API only accessible for authenticated users */
          app.use('/api/BasketItems', security.isAuthorized())
          app.use('/api/BasketItems/:id', security.isAuthorized())
          /* Feedbacks: GET allowed for feedback carousel, POST allowed in order to provide feedback without being logged in */
          app.use('/api/Feedbacks/:id', security.isAuthorized())
          /* Users: Only POST is allowed in order to register a new user */
          app.get('/api/Users', security.isAuthorized())
          app.route('/api/Users/:id')
            .get(security.isAuthorized())
            .put(security.denyAll())
            .delete(security.denyAll())
          /* Products: Only GET is allowed in order to view products */
          app.post('/api/Products', security.isAuthorized())
          // app.put('/api/Products/:id', security.isAuthorized())
          app.delete('/api/Products/:id', security.denyAll())
          /* Challenges: GET list of challenges allowed. Everything else forbidden entirely */
          app.post('/api/Challenges', security.denyAll())
          app.use('/api/Challenges/:id', security.denyAll())
          /* Complaints: POST and GET allowed when logged in only */
          app.get('/api/Complaints', security.isAuthorized())
          app.post('/api/Complaints', security.isAuthorized())
          app.use('/api/Complaints/:id', security.denyAll())
          /* Recycles: POST and GET allowed when logged in only */
          app.get('/api/Recycles', recycles.blockRecycleItems())
          app.post('/api/Recycles', security.isAuthorized())
          /* Challenge evaluation before finale takes over */
          app.get('/api/Recycles/:id', recycles.getRecycleItem())
          app.put('/api/Recycles/:id', security.denyAll())
          app.delete('/api/Recycles/:id', security.denyAll())
          /* SecurityQuestions: Only GET list of questions allowed. */
          app.post('/api/SecurityQuestions', security.denyAll())
          app.use('/api/SecurityQuestions/:id', security.denyAll())
          /* SecurityAnswers: Only POST of answer allowed. */
          app.get('/api/SecurityAnswers', security.denyAll())
          app.use('/api/SecurityAnswers/:id', security.denyAll())
          /* REST API */
          app.use('/rest/user/authentication-details', security.isAuthorized())
          app.use('/rest/basket/:id', security.isAuthorized())
          app.use('/rest/basket/:id/order', security.isAuthorized())
          /* Unauthorized users are not allowed to access B2B API */
          app.use('/b2b/v2', security.isAuthorized())
          /* Check if the quantity is available in stock and limit per user not exceeded, then add item to basket */
          app.put('/api/BasketItems/:id', security.appendUserId(), basketItems.quantityCheckBeforeBasketItemUpdate())
          app.post('/api/BasketItems', security.appendUserId(), basketItems.quantityCheckBeforeBasketItemAddition(), basketItems.addBasketItem())
          /* Accounting users are allowed to check and update quantities */
          app.delete('/api/Quantitys/:id', security.denyAll())
          app.post('/api/Quantitys', security.denyAll())
          app.use('/api/Quantitys/:id', security.isAccounting(), ipfilter(['123.456.789'], { mode: 'allow' }))
          /* Feedbacks: Do not allow changes of existing feedback */
          app.put('/api/Feedbacks/:id', security.denyAll())
          /* PrivacyRequests: Only allowed for authenticated users */
          app.use('/api/PrivacyRequests', security.isAuthorized())
          app.use('/api/PrivacyRequests/:id', security.isAuthorized())
          /* PaymentMethodRequests: Only allowed for authenticated users */
          app.post('/api/Cards', security.appendUserId())
          app.get('/api/Cards', security.appendUserId(), payment.getPaymentMethods())
          app.put('/api/Cards/:id', security.denyAll())
          app.delete('/api/Cards/:id', security.appendUserId(), payment.delPaymentMethodById())
          app.get('/api/Cards/:id', security.appendUserId(), payment.getPaymentMethodById())
          /* PrivacyRequests: Only POST allowed for authenticated users */
          app.post('/api/PrivacyRequests', security.isAuthorized())
          app.get('/api/PrivacyRequests', security.denyAll())
          app.use('/api/PrivacyRequests/:id', security.denyAll())

          app.post('/api/Addresss', security.appendUserId())
          app.get('/api/Addresss', security.appendUserId(), address.getAddress())
          app.put('/api/Addresss/:id', security.appendUserId())
          app.delete('/api/Addresss/:id', security.appendUserId(), address.delAddressById())
          app.get('/api/Addresss/:id', security.appendUserId(), address.getAddressById())
          app.get('/api/Deliverys', delivery.getDeliveryMethods())
          app.get('/api/Deliverys/:id', delivery.getDeliveryMethod())</code></pre>
      cost: 135
- name: Reflected XSS
  description: >-
    Perform a <i>reflected</i> XSS attack with <code>&lt;iframe
    src="javascript:alert(&#x60;xss&#x60;)"&gt;</code>. <em>(This challenge is
    <strong>not available</strong> on Docker!)</em> (Difficulty Level: 2)
  max_attempts: 0
  value: 250
  category: XSS
  type: standard
  state: visible
  flags:
    - type: static
      content: 305021787d3e9cd9cebc057a021c2504550bb3b6
      data: null
  hints:
    - type: standard
      content: >-
        Look for a url parameter where its value appears in the page it is
        leading to.
      cost: 25
- name: Repetitive Registration
  description: 'Follow the DRY principle while registering a user. (Difficulty Level: 1)'
  max_attempts: 0
  value: 100
  category: Improper Input Validation
  type: standard
  state: visible
  flags:
    - type: static
      content: 38327ed39639fb9ced76c9800f991bd8206ee144
      data: null
  hints:
    - type: standard
      content: >-
        You can solve this by cleverly interacting with the UI or bypassing it
        altogether.
      cost: 10
- name: Reset Bender's Password
  description: >-
    Reset Bender's password via the <a href="/#/forgot-password">Forgot
    Password</a> mechanism with <i>the original answer</i> to his security
    question. (Difficulty Level: 4)
  max_attempts: 0
  value: 700
  category: Broken Authentication
  type: standard
  state: visible
  flags:
    - type: static
      content: a3ed0a02985a524747be405af69600b167ecae9a
      data: null
  hints:
    - type: standard
      content: >-
        Not as trivial as Jim's but still not too difficult with some "Futurama"
        background knowledge.
      cost: 70
    - type: standard
      content: |-
        <pre><code>-
          question: 'Your eldest siblings middle name?'
        -
          question: "Mother's maiden name?"
        -
          question: "Mother's birth date? (MM/DD/YY)"
        -
          question: "Father's birth date? (MM/DD/YY)"
        -
          question: "Maternal grandmother's first name?"
        -
          question: "Paternal grandmother's first name?"
        -
          question: 'Name of your favorite pet?'
        -
          question: "Last name of dentist when you were a teenager? (Do not include 'Dr.')"
        -
          question: 'Your ZIP/postal code when you were a teenager?'
        -
          question: 'Company you first work for as an adult?'
        -
          question: 'Your favorite book?'
        -
          question: 'Your favorite movie?'
        -
          question: 'Number of one of your customer or ID cards?'
        -
          question: "What's your favorite place to go hiking?"</code></pre>
      cost: 210
- name: Reset Bjoern's Password
  description: >-
    Reset the password of Bjoern's internal account via the <a
    href="/#/forgot-password">Forgot Password</a> mechanism with <i>the original
    answer</i> to his security question. (Difficulty Level: 5)
  max_attempts: 0
  value: 1000
  category: Broken Authentication
  type: standard
  state: visible
  flags:
    - type: static
      content: dbaa733d61cf894a36235f884227b3a0b6150233
      data: null
  hints:
    - type: standard
      content: >-
        Nothing a little bit of Facebook stalking couldn't reveal. Might involve
        a historical twist.
      cost: 100
    - type: standard
      content: |-
        <pre><code>-
          question: 'Your eldest siblings middle name?'
        -
          question: "Mother's maiden name?"
        -
          question: "Mother's birth date? (MM/DD/YY)"
        -
          question: "Father's birth date? (MM/DD/YY)"
        -
          question: "Maternal grandmother's first name?"
        -
          question: "Paternal grandmother's first name?"
        -
          question: 'Name of your favorite pet?'
        -
          question: "Last name of dentist when you were a teenager? (Do not include 'Dr.')"
        -
          question: 'Your ZIP/postal code when you were a teenager?'
        -
          question: 'Company you first work for as an adult?'
        -
          question: 'Your favorite book?'
        -
          question: 'Your favorite movie?'
        -
          question: 'Number of one of your customer or ID cards?'
        -
          question: "What's your favorite place to go hiking?"</code></pre>
      cost: 300
- name: Reset Jim's Password
  description: >-
    Reset Jim's password via the <a href="/#/forgot-password">Forgot
    Password</a> mechanism with <i>the original answer</i> to his security
    question. (Difficulty Level: 3)
  max_attempts: 0
  value: 450
  category: Broken Authentication
  type: standard
  state: visible
  flags:
    - type: static
      content: 3c3e2d6ef99b733b947e92f8e2a9ed08bf57ea63
      data: null
  hints:
    - type: standard
      content: >-
        It's hard for celebrities to pick a security question from a hard-coded
        list where the answer is not publicly exposed.
      cost: 45
    - type: standard
      content: |-
        <pre><code>-
          question: 'Your eldest siblings middle name?'
        -
          question: "Mother's maiden name?"
        -
          question: "Mother's birth date? (MM/DD/YY)"
        -
          question: "Father's birth date? (MM/DD/YY)"
        -
          question: "Maternal grandmother's first name?"
        -
          question: "Paternal grandmother's first name?"
        -
          question: 'Name of your favorite pet?'
        -
          question: "Last name of dentist when you were a teenager? (Do not include 'Dr.')"
        -
          question: 'Your ZIP/postal code when you were a teenager?'
        -
          question: 'Company you first work for as an adult?'
        -
          question: 'Your favorite book?'
        -
          question: 'Your favorite movie?'
        -
          question: 'Number of one of your customer or ID cards?'
        -
          question: "What's your favorite place to go hiking?"</code></pre>
      cost: 135
- name: Reset Morty's Password
  description: >-
    Reset Morty's password via the <a href="/#/forgot-password">Forgot
    Password</a> mechanism with <i>his obfuscated answer</i> to his security
    question. (Difficulty Level: 5)
  max_attempts: 0
  value: 1000
  category: Broken Anti Automation
  type: standard
  state: visible
  flags:
    - type: static
      content: c25ad846aad83cff51ef49167f6f54b467e731de
      data: null
  hints:
    - type: standard
      content: >-
        Find a way to bypass the rate limiting and brute force the obfuscated
        answer to Morty's security question.
      cost: 100
    - type: standard
      content: |-
        <pre><code>/* Rate limiting */
          app.enable('trust proxy')
          app.use('/rest/user/reset-password', new RateLimit({
            windowMs: 5 * 60 * 1000,
            max: 100,
            keyGenerator ({ headers, ip }: { headers: any, ip: any }) { return headers['X-Forwarded-For'] || ip }
          }))</code></pre>
      cost: 300
- name: Retrieve Blueprint
  description: >-
    Deprive the shop of earnings by downloading the blueprint for one of its
    products. (Difficulty Level: 5)
  max_attempts: 0
  value: 1000
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: 5ec16347194b662a773887b63845315e8a3c7237
      data: null
  hints:
    - type: standard
      content: >-
        The product you might want to give a closer look is the OWASP Juice Shop
        Logo (3D-printed).
      cost: 100
- name: SSRF
  description: 'Request a hidden resource on server through server. (Difficulty Level: 6)'
  max_attempts: 0
  value: 1350
  category: Broken Access Control
  type: standard
  state: visible
  flags:
    - type: static
      content: cd689fc32a8e1288a9b762aebacd9756f8c78ab5
      data: null
  hints:
    - type: standard
      content: Reverse engineering something bad can make good things happen.
      cost: 135
- name: SSTi
  description: >-
    Infect the server with juicy malware by abusing arbitrary command execution.
    <em>(This challenge is <strong>not available</strong> on Docker!)</em>
    (Difficulty Level: 6)
  max_attempts: 0
  value: 1350
  category: Injection
  type: standard
  state: visible
  flags:
    - type: static
      content: 4a08ddbd93e970fd7cdca4f2fc940f6fc35dc7d8
      data: null
  hints:
    - type: standard
      content: >-
        "SSTi" is a clear indicator that this has nothing to do with anything
        Angular. Also, make sure to use only our non-malicious malware.
      cost: 135
- name: Score Board
  description: 'Find the carefully hidden ''Score Board'' page. (Difficulty Level: 1)'
  max_attempts: 0
  value: 100
  category: Miscellaneous
  type: standard
  state: visible
  flags:
    - type: static
      content: 2614339936e8282e2f820f023d4d998a1f95e02a
      data: null
  hints:
    - type: standard
      content: >-
        Try to find a reference or clue behind the scenes. Or simply guess what
        URL the Score Board might have.
      cost: 10
    - type: standard
      content: |-
        <pre><code>const routes: Routes = [
          {
            path: 'administration',
            component: AdministrationComponent,
            canActivate: [AdminGuard]
          },
          {
            path: 'accounting',
            component: AccountingComponent,
            canActivate: [AccountingGuard]
          },
          {
            path: 'about',
            component: AboutComponent
          },
          {
            path: 'address/select',
            component: AddressSelectComponent,
            canActivate: [LoginGuard]
          },
          {
            path: 'address/saved',
            component: SavedAddressComponent,
            canActivate: [LoginGuard]
          },
          {
            path: 'address/create',
            component: AddressCreateComponent,
            canActivate: [LoginGuard]
          },
          {
            path: 'address/edit/:addressId',
            component: AddressCreateComponent,
            canActivate: [LoginGuard]
          },
          {
            path: 'delivery-method',
            component: DeliveryMethodComponent
          },
          {
            path: 'deluxe-membership',
            component: DeluxeUserComponent,
            canActivate: [LoginGuard]
          },
          {
            path: 'saved-payment-methods',
            component: SavedPaymentMethodsComponent
          },
          {
            path: 'basket',
            component: BasketComponent
          },
          {
            path: 'order-completion/:id',
            component: OrderCompletionComponent
          },
          {
            path: 'contact',
            component: ContactComponent
          },
          {
            path: 'photo-wall',
            component: PhotoWallComponent
          },
          {
            path: 'complain',
            component: ComplaintComponent
          },
          {
            path: 'chatbot',
            component: ChatbotComponent
          },
          {
            path: 'order-summary',
            component: OrderSummaryComponent
          },
          {
            path: 'order-history',
            component: OrderHistoryComponent
          },
          {
            path: 'payment/:entity',
            component: PaymentComponent
          },
          {
            path: 'wallet',
            component: WalletComponent
          },
          {
            path: 'login',
            component: LoginComponent
          },
          {
            path: 'forgot-password',
            component: ForgotPasswordComponent
          },
          {
            path: 'recycle',
            component: RecycleComponent
          },
          {
            path: 'register',
            component: RegisterComponent
          },
          {
            path: 'search',
            component: SearchResultComponent
          },
          {
            path: 'hacking-instructor',
            component: SearchResultComponent
          },
          {
            path: 'score-board',
            component: ScoreBoardComponent
          },
          {
            path: 'track-result',
            component: TrackResultComponent
          },
          {
            path: 'track-result/new',
            component: TrackResultComponent,
            data: {
              type: 'new'
            }
          },
          {
            path: '2fa/enter',
            component: TwoFactorAuthEnterComponent
          },
          {
            path: 'privacy-security',
            component: PrivacySecurityComponent,
            children: [
              {
                path: 'privacy-policy',
                component: PrivacyPolicyComponent
              },
              {
                path: 'change-password',
                component: ChangePasswordComponent
              },
              {
                path: 'two-factor-authentication',
                component: TwoFactorAuthComponent
              },
              {
                path: 'data-export',
                component: DataExportComponent
              },
              {
                path: 'last-login-ip',
                component: LastLoginIpComponent
              }
            ]
          },
           {
            matcher: oauthMatcher,
            data: { params: (window.location.href).substr(window.location.href.indexOf('#')) },
            component: OAuthComponent
          },
          {
            matcher: tokenMatcher,
            component: TokenSaleComponent
          },
          {
            path: '403',
            component: ErrorPageComponent
          },
          {
            path: '**',
            component: SearchResultComponent
          }
        ]</code></pre>
      cost: 30
- name: Security Policy
  description: >-
    Behave like any "white-hat" should before getting into the action.
    (Difficulty Level: 2)
  max_attempts: 0
  value: 250
  category: Miscellaneous
  type: standard
  state: visible
  flags:
    - type: static
      content: 980d88a684fbf348f5812fc06fbfab2d8f66c76d
      data: null
  hints:
    - type: standard
      content: >-
        Undoubtably you want to read our security policy before conducting any
        research on our application.
      cost: 25
- name: Server-side XSS Protection
  description: >-
    Perform a <i>persisted</i> XSS attack with <code>&lt;iframe
    src="javascript:alert(&#x60;xss&#x60;)"&gt;</code> bypassing a
    <i>server-side</i> security mechanism. <em>(This challenge is <strong>not
    available</strong> on Docker!)</em> (Difficulty Level: 4)
  max_attempts: 0
  value: 700
  category: XSS
  type: standard
  state: visible
  flags:
    - type: static
      content: 55520e3cd59f94c0177371d67a70fd4c023c57ea
      data: null
  hints:
    - type: standard
      content: >-
        The "Comment" field in the "Customer Feedback" screen is where you want
        to put your focus on.
      cost: 70
- name: Steganography
  description: >-
    <a href="/#/contact">Rat out</a> a notorious character hiding in plain sight
    in the shop. (Mention the exact name of the character) (Difficulty Level: 4)
  max_attempts: 0
  value: 700
  category: Security through Obscurity
  type: standard
  state: visible
  flags:
    - type: static
      content: 8df0878bad13852abf627d0ccf345522c6edcc21
      data: null
  hints:
    - type: standard
      content: >-
        No matter how good your eyes are, you will need tool assistance for this
        challenge.
      cost: 70
- name: Successful RCE DoS
  description: >-
    Perform a Remote Code Execution that occupies the server for a while without
    using infinite loops. <em>(This challenge is <strong>not available</strong>
    on Docker!)</em> (Difficulty Level: 6)
  max_attempts: 0
  value: 1350
  category: Insecure Deserialization
  type: standard
  state: visible
  flags:
    - type: static
      content: e3dd33892286cd40320283238d5c6babe93187d2
      data: null
  hints:
    - type: standard
      content: >-
        Your attack payload must not trigger the protection against too many
        iterations.
      cost: 135
- name: Supply Chain Attack
  description: >-
    <a href="/#/contact">Inform the development team</a> about a danger to some
    of <em>their</em> credentials. (Send them the URL of the <em>original
    report</em> or an assigned CVE or another identifier of this vulnerability)
    (Difficulty Level: 5)
  max_attempts: 0
  value: 1000
  category: Vulnerable Components
  type: standard
  state: visible
  flags:
    - type: static
      content: 05a4bcdca9809df4506551b5b1f229fd55157572
      data: null
  hints:
    - type: standard
      content: >-
        This vulnerability will not affect any customer of the shop. It is aimed
        exclusively at its developers.
      cost: 100
- name: Two Factor Authentication
  description: >-
    Solve the 2FA challenge for user "wurstbrot". (Disabling, bypassing or
    overwriting his 2FA settings does not count as a solution) (Difficulty
    Level: 5)
  max_attempts: 0
  value: 1000
  category: Broken Authentication
  type: standard
  state: visible
  flags:
    - type: static
      content: 04d6e957416281fe13669a7fe685fc27cb6c53c4
      data: null
  hints:
    - type: standard
      content: >-
        The 2FA implementation requires to store a secret for every user. You
        will need to find a way to access this secret in order to solve this
        challenge.
      cost: 100
- name: Unsigned JWT
  description: >-
    Forge an essentially unsigned JWT token that impersonates the (non-existing)
    user <i>jwtn3d@juice-sh.op</i>. (Difficulty Level: 5)
  max_attempts: 0
  value: 1000
  category: Vulnerable Components
  type: standard
  state: visible
  flags:
    - type: static
      content: 8614152eaa8ea996bd1359f4144ad3e8cc762198
      data: null
  hints:
    - type: standard
      content: >-
        This challenge exploits a weird option that is supported when signing
        tokens with JWT.
      cost: 100
- name: Upload Size
  description: 'Upload a file larger than 100 kB. (Difficulty Level: 3)'
  max_attempts: 0
  value: 450
  category: Improper Input Validation
  type: standard
  state: visible
  flags:
    - type: static
      content: e3b59553d1be5291f45a76abe8291e3b666272d7
      data: null
  hints:
    - type: standard
      content: >-
        You can attach a small file to the "Complaint" form. Investigate how
        this upload actually works.
      cost: 45
- name: Upload Type
  description: 'Upload a file that has no .pdf or .zip extension. (Difficulty Level: 3)'
  max_attempts: 0
  value: 450
  category: Improper Input Validation
  type: standard
  state: visible
  flags:
    - type: static
      content: 3ca7d41d1c903c5ae68c2f713c9f875db870aca0
      data: null
  hints:
    - type: standard
      content: >-
        You can attach a PDF or ZIP file to the "Complaint" form. Investigate
        how this upload actually works.
      cost: 45
- name: User Credentials
  description: >-
    Retrieve a list of all user credentials via SQL Injection. (Difficulty
    Level: 4)
  max_attempts: 0
  value: 700
  category: Injection
  type: standard
  state: visible
  flags:
    - type: static
      content: b2bbb412cd027095df70fa3ca8d61ad0e101406e
      data: null
  hints:
    - type: standard
      content: >-
        Gather information on where user data is stored and how it is addressed.
        Then craft a corresponding UNION SELECT attack.
      cost: 70
    - type: standard
      content: |-
        <pre><code>module.exports = function searchProducts () {
          return (req: Request, res: Response, next: NextFunction) => {
            let criteria: any = req.query.q === 'undefined' ? '' : req.query.q ?? ''
            criteria = (criteria.length <= 200) ? criteria : criteria.substring(0, 200)
            models.sequelize.query(`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`)
              .then(([products]: any) => {
                const dataString = JSON.stringify(products)
                for (let i = 0; i < products.length; i++) {
                  products[i].name = req.__(products[i].name)
                  products[i].description = req.__(products[i].description)
                }
                res.json(utils.queryResultToJson(products))
              }).catch((error: ErrorWithParent) => {
                next(error.parent)
              })
          }
        }</code></pre>
      cost: 210
- name: Video XSS
  description: >-
    Embed an XSS payload
    <code>&lt;/script&gt;&lt;script&gt;alert(&#x60;xss&#x60;)&lt;/script&gt;</code>
    into our promo video. <em>(This challenge is <strong>not available</strong>
    on Docker!)</em> (Difficulty Level: 6)
  max_attempts: 0
  value: 1350
  category: XSS
  type: standard
  state: visible
  flags:
    - type: static
      content: 5dec3d5cc33e7137736c615bc10a0c52359e86a8
      data: null
  hints:
    - type: standard
      content: >-
        You have to reuse the vulnerability behind one other 6-star challenge to
        be able to solve this one.
      cost: 135
- name: View Basket
  description: 'View another user''s shopping basket. (Difficulty Level: 2)'
  max_attempts: 0
  value: 250
  category: Broken Access Control
  type: standard
  state: visible
  flags:
    - type: static
      content: e6982b34b6734ceadd28e5019b251f929a80b815
      data: null
  hints:
    - type: standard
      content: >-
        Have an eye on the HTTP traffic while shopping. Alternatively try to
        find a client-side association of users to their basket.
      cost: 25
- name: Vulnerable Library
  description: >-
    <a href="/#/contact">Inform the shop</a> about a vulnerable library it is
    using. (Mention the exact library name and version in your comment)
    (Difficulty Level: 4)
  max_attempts: 0
  value: 700
  category: Vulnerable Components
  type: standard
  state: visible
  flags:
    - type: static
      content: d6c3b1f0724fd3dbf4272c127a790c39a200876b
      data: null
  hints:
    - type: standard
      content: >-
        Report one of two possible answers via the "Customer Feedback" form. Do
        not forget to submit the library's version as well.
      cost: 70
- name: Weird Crypto
  description: >-
    <a href="/#/contact">Inform the shop</a> about an algorithm or library it
    should definitely not use the way it does. (Difficulty Level: 2)
  max_attempts: 0
  value: 250
  category: Cryptographic Issues
  type: standard
  state: visible
  flags:
    - type: static
      content: 84054d82b9a99da2db6392744dad1e7e28bd2cca
      data: null
  hints:
    - type: standard
      content: Report one of four possible answers via the "Customer Feedback" form.
      cost: 25
- name: Allowlist Bypass
  description: >-
    Enforce a redirect to a page you are not supposed to redirect to.
    (Difficulty Level: 4)
  max_attempts: 0
  value: 700
  category: Unvalidated Redirects
  type: standard
  state: visible
  flags:
    - type: static
      content: ed389b769ec2380372f247f8b669097bb55f3b7f
      data: null
  hints:
    - type: standard
      content: You have to find a way to beat the allowlist of allowed redirect URLs.
      cost: 70
    - type: standard
      content: |-
        <pre><code>const redirectAllowlist = new Set([
          'https://github.com/bkimminich/juice-shop',
          'https://blockchain.info/address/1AbKfgvw9psQ41NbLi8kufDQTezwG8DRZm',
          'https://explorer.dash.org/address/Xr556RzuwX6hg5EGpkybbv5RanJoZN17kW',
          'https://etherscan.io/address/0x0f933ab9fcaaa782d0279c300d73750e1311eae6',
          'http://shop.spreadshirt.com/juiceshop',
          'http://shop.spreadshirt.de/juiceshop',
          'https://www.stickeryou.com/products/owasp-juice-shop/794',
          'http://leanpub.com/juice-shop'
        ])
        exports.redirectAllowlist = redirectAllowlist

        exports.isRedirectAllowed = (url: string) => {
          let allowed = false
          for (const allowedUrl of redirectAllowlist) {
            allowed = allowed || url.includes(allowedUrl)
          }
          return allowed
        }</code></pre>
      cost: 210
- name: XXE Data Access
  description: >-
    Retrieve the content of <code>C:\Windows\system.ini</code> or
    <code>/etc/passwd</code> from the server. <em>(This challenge is <strong>not
    available</strong> on Docker!)</em> (Difficulty Level: 3)
  max_attempts: 0
  value: 450
  category: XXE
  type: standard
  state: visible
  flags:
    - type: static
      content: 5a196f6f8335ad860de5fd4597a69de8f23dbce8
      data: null
  hints:
    - type: standard
      content: The leverage point for this challenge is the deprecated B2B interface.
      cost: 45
- name: XXE DoS
  description: >-
    Give the server something to chew on for quite a while. <em>(This challenge
    is <strong>not available</strong> on Docker!)</em> (Difficulty Level: 5)
  max_attempts: 0
  value: 1000
  category: XXE
  type: standard
  state: visible
  flags:
    - type: static
      content: f884fb0fd5282d5a33cf44fd65e20ddad1d2b795
      data: null
  hints:
    - type: standard
      content: >-
        It is not as easy as sending a large amount of data directly to the
        deprecated B2B interface.
      cost: 100
- name: Zero Stars
  description: 'Give a devastating zero-star feedback to the store. (Difficulty Level: 1)'
  max_attempts: 0
  value: 100
  category: Improper Input Validation
  type: standard
  state: visible
  flags:
    - type: static
      content: e958569c4a12e3b97f38bd05cac3f0e5a1b17142
      data: null
  hints:
    - type: standard
      content: >-
        Before you invest time bypassing the API, you might want to play around
        with the UI a bit.
      cost: 10
- name: Missing Encoding
  description: >-
    Retrieve the photo of Bjoern's cat in "melee combat-mode". (Difficulty
    Level: 1)
  max_attempts: 0
  value: 100
  category: Improper Input Validation
  type: standard
  state: visible
  flags:
    - type: static
      content: 9d4e5e79b87d07944942d37811426c4e3148d446
      data: null
  hints:
    - type: standard
      content: Check the Photo Wall for an image that could not be loaded correctly.
      cost: 10
- name: Cross-Site Imaging
  description: >-
    Stick <a href="http://placekitten.com/" target="_blank">cute cross-domain
    kittens</a> all over our delivery boxes. (Difficulty Level: 5)
  max_attempts: 0
  value: 1000
  category: Security Misconfiguration
  type: standard
  state: visible
  flags:
    - type: static
      content: ed6fafa2fe184c01a64581004393737449dd6ba4
      data: null
  hints:
    - type: standard
      content: >-
        This challenge would formally have to be in several categories as the
        developers made multiple gaffes for this to be possible.
      cost: 100
- name: Exposed Metrics
  description: >-
    Find the endpoint that serves usage data to be scraped by a <a
    href="https://github.com/prometheus/prometheus">popular monitoring
    system</a>. (Difficulty Level: 1)
  max_attempts: 0
  value: 100
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: ab5b8d18378fbcb0f3bc6e9f2b1e3eebc676334e
      data: null
  hints:
    - type: standard
      content: Try to guess what URL the endpoint might have.
      cost: 10
    - type: standard
      content: >-
        <pre><code>/* Serve metrics */

        const Metrics = metrics.observeMetrics()

        const metricsUpdateLoop = Metrics.updateLoop

        app.get('/metrics', metrics.serveMetrics())

        errorhandler.title = `${config.get('application.name')} (Express
        ${utils.version('express')})`


        const registerWebsocketEvents =
        require('./lib/startup/registerWebsocketEvents')

        const customizeApplication =
        require('./lib/startup/customizeApplication')

        export async function start (readyCallback: Function) {
          const datacreatorEnd = startupGauge.startTimer({ task: 'datacreator' })
          await sequelize.sync({ force: true })
          await datacreator()
          datacreatorEnd()
          const port = process.env.PORT ?? config.get('server.port')
          process.env.BASE_PATH = process.env.BASE_PATH ?? config.get('server.basePath')

          server.listen(port, () => {
            logger.info(colors.cyan(`Server listening on port ${colors.bold(port)}`))
            startupGauge.set({ task: 'ready' }, (Date.now() - startTime) / 1000)
            if (process.env.BASE_PATH !== '') {
              logger.info(colors.cyan(`Server using proxy base path ${colors.bold(process.env.BASE_PATH)} for redirects`))
            }
            registerWebsocketEvents(server)
            if (readyCallback) {
              readyCallback()
            }
          })

        }


        export function close (exitCode: number | undefined) {
          if (server) {
            clearInterval(metricsUpdateLoop)
            server.close()
          }
          if (exitCode !== undefined) {
            process.exit(exitCode)
          }
        }</code></pre>
      cost: 30
- name: Deluxe Fraud
  description: 'Obtain a Deluxe Membership without paying for it. (Difficulty Level: 3)'
  max_attempts: 0
  value: 450
  category: Improper Input Validation
  type: standard
  state: visible
  flags:
    - type: static
      content: 638524b76976aae9fb41a264fd7c06d813635e1e
      data: null
  hints:
    - type: standard
      content: Look closely at what happens when you attempt to upgrade your account.
      cost: 45
- name: CSRF
  description: >-
    Change the name of a user by performing Cross-Site Request Forgery from <a
    href="http://htmledit.squarefree.com">another origin</a>. (Difficulty Level:
    3)
  max_attempts: 0
  value: 450
  category: Broken Access Control
  type: standard
  state: visible
  flags:
    - type: static
      content: 7f2af07e0e0ac2c54e8ae0665b4aa68762ba63af
      data: null
  hints:
    - type: standard
      content: >-
        Find a form which updates the username and then construct a malicious
        page in the online HTML editor.
      cost: 45
- name: Bonus Payload
  description: >-
    Use the bonus payload <code>&lt;iframe width=&quot;100%&quot;
    height=&quot;166&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot;
    allow=&quot;autoplay&quot;
    src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/771984076&amp;color=%23ff5500&amp;auto_play=true&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;show_teaser=true&quot;&gt;&lt;/iframe&gt;</code>
    in the <i>DOM XSS</i> challenge. (Difficulty Level: 1)
  max_attempts: 0
  value: 100
  category: XSS
  type: standard
  state: visible
  flags:
    - type: static
      content: a81183bb5eaf30e6f5ae3c14acb572976072f4c9
      data: null
  hints:
    - type: standard
      content: Copy + Paste = Solved!
      cost: 10
    - type: standard
      content: |-
        <pre><code>filterTable () {
            let queryParam: string = this.route.snapshot.queryParams.q
            if (queryParam) {
              queryParam = queryParam.trim()
              this.dataSource.filter = queryParam.toLowerCase()
              this.searchValue = this.sanitizer.bypassSecurityTrustHtml(queryParam)
              this.gridDataSource.subscribe((result: any) => {
                if (result.length === 0) {
                  this.emptyState = true
                } else {
                  this.emptyState = false
                }
              })
            } else {
              this.dataSource.filter = ''
              this.searchValue = undefined
              this.emptyState = false
            }
          }</code></pre>
      cost: 30
- name: Reset Uvogin's Password
  description: >-
    Reset Uvogin's password via the <a href="/#/forgot-password">Forgot
    Password</a> mechanism with <i>the original answer</i> to his security
    question. (Difficulty Level: 4)
  max_attempts: 0
  value: 700
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: 76759927fb4e587ad58ca8eb14e0034e55c4c6d3
      data: null
  hints:
    - type: standard
      content: >-
        You might have to do some OSINT on his social media personas to find out
        his honest answer to the security question.
      cost: 70
    - type: standard
      content: |-
        <pre><code>-
          question: 'Your eldest siblings middle name?'
        -
          question: "Mother's maiden name?"
        -
          question: "Mother's birth date? (MM/DD/YY)"
        -
          question: "Father's birth date? (MM/DD/YY)"
        -
          question: "Maternal grandmother's first name?"
        -
          question: "Paternal grandmother's first name?"
        -
          question: 'Name of your favorite pet?'
        -
          question: "Last name of dentist when you were a teenager? (Do not include 'Dr.')"
        -
          question: 'Your ZIP/postal code when you were a teenager?'
        -
          question: 'Company you first work for as an adult?'
        -
          question: 'Your favorite book?'
        -
          question: 'Your favorite movie?'
        -
          question: 'Number of one of your customer or ID cards?'
        -
          question: "What's your favorite place to go hiking?"</code></pre>
      cost: 210
- name: Meta Geo Stalking
  description: >-
    Determine the answer to John's security question by looking at an upload of
    him to the Photo Wall and use it to reset his password via the <a
    href="/#/forgot-password">Forgot Password</a> mechanism. (Difficulty Level:
    2)
  max_attempts: 0
  value: 250
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: 1bf405de0c6cffac953daa8c8d0ae7a72072b3eb
      data: null
  hints:
    - type: standard
      content: Take a look at the meta data of the corresponding photo.
      cost: 25
- name: Visual Geo Stalking
  description: >-
    Determine the answer to Emma's security question by looking at an upload of
    her to the Photo Wall and use it to reset her password via the <a
    href="/#/forgot-password">Forgot Password</a> mechanism. (Difficulty Level:
    2)
  max_attempts: 0
  value: 250
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: 974658d2522a1de540e85d925dadcfc1891ccbea
      data: null
  hints:
    - type: standard
      content: >-
        Take a look at the details in the photo to determine the location of
        where it was taken.
      cost: 25
- name: Kill Chatbot
  description: >-
    Permanently disable the support chatbot so that it can no longer answer
    customer queries. (Difficulty Level: 5)
  max_attempts: 0
  value: 1000
  category: Vulnerable Components
  type: standard
  state: visible
  flags:
    - type: static
      content: 2d55d113bdd3535ed2b7170fc2ff43a5ff324b84
      data: null
  hints:
    - type: standard
      content: >-
        Think of a way to get a hold of the internal workings on the chatbot
        API.
      cost: 100
- name: Poison Null Byte
  description: >-
    Bypass a security control with a <a
    href="http://hakipedia.com/index.php/Poison_Null_Byte">Poison Null Byte</a>
    to access a file not meant for your eyes. (Difficulty Level: 4)
  max_attempts: 0
  value: 700
  category: Improper Input Validation
  type: standard
  state: visible
  flags:
    - type: static
      content: cfdeea14e8f01b4952722fd0e4a77f1928593c9a
      data: null
  hints:
    - type: standard
      content: >-
        Take a look at the details in the photo to determine the location of
        where it was taken.
      cost: 70
- name: Bully Chatbot
  description: 'Receive a coupon code from the support chatbot. (Difficulty Level: 1)'
  max_attempts: 0
  value: 100
  category: Miscellaneous
  type: standard
  state: visible
  flags:
    - type: static
      content: 9dd704b4c48bd310dd3187971a344c179213562d
      data: null
  hints:
    - type: standard
      content: Just keep asking.
      cost: 10
- name: Local File Read
  description: >-
    Gain read access to an arbitrary local file on the web server. <em>(This
    challenge is <strong>not available</strong> on Docker!)</em> (Difficulty
    Level: 5)
  max_attempts: 0
  value: 1000
  category: Vulnerable Components
  type: standard
  state: visible
  flags:
    - type: static
      content: 6cbafed57d94b84630427bb24ab80b31efc578f5
      data: null
  hints:
    - type: standard
      content: >-
        You should read up on vulnerabilities in popular NodeJs template
        engines.
      cost: 100
