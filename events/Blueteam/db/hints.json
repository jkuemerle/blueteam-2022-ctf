{"results":[{"id":1,"challenge_id":1,"type":"standard","content":"You need to work with the server-side API directly. Try different HTTP verbs on different entities exposed through the API.","cost":45},{"id":2,"challenge_id":1,"type":"standard","content":"<pre><code>ngAfterViewInit () {\n    const products = this.productService.search('')\n    const quantities = this.quantityService.getAll()\n    forkJoin([quantities, products]).subscribe(([quantities, products]) => {\n      const dataTable: TableEntry[] = []\n      this.tableData = products\n      this.trustProductDescription(products)\n      for (const product of products) {\n        dataTable.push({\n          name: product.name,\n          price: product.price,\n          deluxePrice: product.deluxePrice,\n          id: product.id,\n          image: product.image,\n          description: product.description\n        })\n      }\n      for (const quantity of quantities) {\n        const entry = dataTable.find((dataTableEntry) => {\n          return dataTableEntry.id === quantity.ProductId\n        })\n        if (entry === undefined) {\n          continue\n        }\n        entry.quantity = quantity.quantity\n      }\n      this.dataSource = new MatTableDataSource<TableEntry>(dataTable)\n      for (let i = 1; i <= Math.ceil(this.dataSource.data.length / 12); i++) {\n        this.pageSizeOptions.push(i * 12)\n      }\n      this.paginator.pageSizeOptions = this.pageSizeOptions\n      this.dataSource.paginator = this.paginator\n      this.gridDataSource = this.dataSource.connect()\n      this.resultsLength = this.dataSource.data.length\n      this.filterTable()\n      this.routerSubscription = this.router.events.subscribe(() => {\n        this.filterTable()\n      })\n      if (window.innerWidth < 2600) {\n        this.breakpoint = 4\n        if (window.innerWidth < 1740) {\n          this.breakpoint = 3\n          if (window.innerWidth < 1280) {\n            this.breakpoint = 2\n            if (window.innerWidth < 850) {\n              this.breakpoint = 1\n            }\n          }\n        }\n      } else {\n        this.breakpoint = 6\n      }\n      this.cdRef.detectChanges()\n    }, (err) => console.log(err))\n  }\n\n  trustProductDescription (tableData: any[]) {\n    for (let i = 0; i < tableData.length; i++) {\n      tableData[i].description = this.sanitizer.bypassSecurityTrustHtml(tableData[i].description)\n    }\n  }</code></pre>","cost":135},{"id":3,"challenge_id":2,"type":"standard","content":"Who would want a server access log to be accessible through a web application?","cost":70},{"id":4,"challenge_id":2,"type":"standard","content":"<pre><code>/* /ftp directory browsing and file download */\n  app.use('/ftp', serveIndexMiddleware, serveIndex('ftp', { icons: true }))\n  app.use('/ftp(?!/quarantine)/:file', fileServer())\n  app.use('/ftp/quarantine/:file', quarantineServer())\n\n  /* /encryptionkeys directory browsing */\n  app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view: 'details' }))\n  app.use('/encryptionkeys/:file', keyServer())\n\n  /* /logs directory browsing */\n  app.use('/support/logs', serveIndexMiddleware, serveIndex('logs', { icons: true, view: 'details' }))\n  app.use('/support/logs/:file', logFileServer())\n\n  /* Swagger documentation for B2B v2 endpoints */\n  app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerDocument))\n\n  app.use(express.static(path.resolve('frontend/dist/frontend')))\n  app.use(cookieParser('kekse'))</code></pre>","cost":210},{"id":5,"challenge_id":3,"type":"standard","content":"You have to assign the unassignable.","cost":45},{"id":6,"challenge_id":3,"type":"standard","content":"<pre><code>/* Generated API endpoints */\n  finale.initialize({ app, sequelize })\n\n  const autoModels = [\n    { name: 'User', exclude: ['password', 'totpSecret'], model: UserModel },\n    { name: 'Product', exclude: [], model: ProductModel },\n    { name: 'Feedback', exclude: [], model: FeedbackModel },\n    { name: 'BasketItem', exclude: [], model: BasketItemModel },\n    { name: 'Challenge', exclude: [], model: ChallengeModel },\n    { name: 'Complaint', exclude: [], model: ComplaintModel },\n    { name: 'Recycle', exclude: [], model: RecycleModel },\n    { name: 'SecurityQuestion', exclude: [], model: SecurityQuestionModel },\n    { name: 'SecurityAnswer', exclude: [], model: SecurityAnswerModel },\n    { name: 'Address', exclude: [], model: AddressModel },\n    { name: 'PrivacyRequest', exclude: [], model: PrivacyRequestModel },\n    { name: 'Card', exclude: [], model: CardModel },\n    { name: 'Quantity', exclude: [], model: QuantityModel }\n  ]\n\n  for (const { name, exclude, model } of autoModels) {\n    const resource = finale.resource({\n      model,\n      endpoints: [`/api/${name}s`, `/api/${name}s/:id`],\n      excludeAttributes: exclude\n    })\n\n    // create a wallet when a new user is registered using API\n    if (name === 'User') {\n      resource.create.send.before((req: Request, res: Response, context: { instance: { id: any }, continue: any }) => {\n        WalletModel.create({ UserId: context.instance.id }).catch((err: unknown) => {\n          console.log(err)\n        })\n        return context.continue\n      })\n    }</code></pre>","cost":135},{"id":7,"challenge_id":4,"type":"standard","content":"It is just slightly harder to find than the score board link.","cost":25},{"id":8,"challenge_id":4,"type":"standard","content":"<pre><code>const routes: Routes = [\n  {\n    path: 'administration',\n    component: AdministrationComponent,\n    canActivate: [AdminGuard]\n  },\n  {\n    path: 'accounting',\n    component: AccountingComponent,\n    canActivate: [AccountingGuard]\n  },\n  {\n    path: 'about',\n    component: AboutComponent\n  },\n  {\n    path: 'address/select',\n    component: AddressSelectComponent,\n    canActivate: [LoginGuard]\n  },\n  {\n    path: 'address/saved',\n    component: SavedAddressComponent,\n    canActivate: [LoginGuard]\n  },\n  {\n    path: 'address/create',\n    component: AddressCreateComponent,\n    canActivate: [LoginGuard]\n  },\n  {\n    path: 'address/edit/:addressId',\n    component: AddressCreateComponent,\n    canActivate: [LoginGuard]\n  },\n  {\n    path: 'delivery-method',\n    component: DeliveryMethodComponent\n  },\n  {\n    path: 'deluxe-membership',\n    component: DeluxeUserComponent,\n    canActivate: [LoginGuard]\n  },\n  {\n    path: 'saved-payment-methods',\n    component: SavedPaymentMethodsComponent\n  },\n  {\n    path: 'basket',\n    component: BasketComponent\n  },\n  {\n    path: 'order-completion/:id',\n    component: OrderCompletionComponent\n  },\n  {\n    path: 'contact',\n    component: ContactComponent\n  },\n  {\n    path: 'photo-wall',\n    component: PhotoWallComponent\n  },\n  {\n    path: 'complain',\n    component: ComplaintComponent\n  },\n  {\n    path: 'chatbot',\n    component: ChatbotComponent\n  },\n  {\n    path: 'order-summary',\n    component: OrderSummaryComponent\n  },\n  {\n    path: 'order-history',\n    component: OrderHistoryComponent\n  },\n  {\n    path: 'payment/:entity',\n    component: PaymentComponent\n  },\n  {\n    path: 'wallet',\n    component: WalletComponent\n  },\n  {\n    path: 'login',\n    component: LoginComponent\n  },\n  {\n    path: 'forgot-password',\n    component: ForgotPasswordComponent\n  },\n  {\n    path: 'recycle',\n    component: RecycleComponent\n  },\n  {\n    path: 'register',\n    component: RegisterComponent\n  },\n  {\n    path: 'search',\n    component: SearchResultComponent\n  },\n  {\n    path: 'hacking-instructor',\n    component: SearchResultComponent\n  },\n  {\n    path: 'score-board',\n    component: ScoreBoardComponent\n  },\n  {\n    path: 'track-result',\n    component: TrackResultComponent\n  },\n  {\n    path: 'track-result/new',\n    component: TrackResultComponent,\n    data: {\n      type: 'new'\n    }\n  },\n  {\n    path: '2fa/enter',\n    component: TwoFactorAuthEnterComponent\n  },\n  {\n    path: 'privacy-security',\n    component: PrivacySecurityComponent,\n    children: [\n      {\n        path: 'privacy-policy',\n        component: PrivacyPolicyComponent\n      },\n      {\n        path: 'change-password',\n        component: ChangePasswordComponent\n      },\n      {\n        path: 'two-factor-authentication',\n        component: TwoFactorAuthComponent\n      },\n      {\n        path: 'data-export',\n        component: DataExportComponent\n      },\n      {\n        path: 'last-login-ip',\n        component: LastLoginIpComponent\n      }\n    ]\n  },\n   {\n    matcher: oauthMatcher,\n    data: { params: (window.location.href).substr(window.location.href.indexOf('#')) },\n    component: OAuthComponent\n  },\n  {\n    matcher: tokenMatcher,\n    component: TokenSaleComponent\n  },\n  {\n    path: '403',\n    component: ErrorPageComponent\n  },\n  {\n    path: '**',\n    component: SearchResultComponent\n  }\n]</code></pre>","cost":75},{"id":9,"challenge_id":5,"type":"standard","content":"Look out for a tweet praising new functionality of the web shop. Then find a third party vulnerability associated with it.","cost":135},{"id":10,"challenge_id":6,"type":"standard","content":"He might have spoilered it on at least one occasion where a camera was running. Maybe elsewhere as well.","cost":45},{"id":11,"challenge_id":6,"type":"standard","content":"<pre><code>-\n  question: 'Your eldest siblings middle name?'\n-\n  question: \"Mother's maiden name?\"\n-\n  question: \"Mother's birth date? (MM/DD/YY)\"\n-\n  question: \"Father's birth date? (MM/DD/YY)\"\n-\n  question: \"Maternal grandmother's first name?\"\n-\n  question: \"Paternal grandmother's first name?\"\n-\n  question: 'Name of your favorite pet?'\n-\n  question: \"Last name of dentist when you were a teenager? (Do not include 'Dr.')\"\n-\n  question: 'Your ZIP/postal code when you were a teenager?'\n-\n  question: 'Company you first work for as an adult?'\n-\n  question: 'Your favorite book?'\n-\n  question: 'Your favorite movie?'\n-\n  question: 'Number of one of your customer or ID cards?'\n-\n  question: \"What's your favorite place to go hiking?\"</code></pre>","cost":135},{"id":12,"challenge_id":7,"type":"standard","content":"The developers truly believe in \"Security through Obscurity\" over actual access restrictions.","cost":100},{"id":13,"challenge_id":7,"type":"standard","content":"<pre><code>{\n    matcher: oauthMatcher,\n    data: { params: (window.location.href).substr(window.location.href.indexOf('#')) },\n    component: OAuthComponent\n  },\n  {\n    matcher: tokenMatcher,\n    component: TokenSaleComponent\n  },\n  {\n    path: '403',\n    component: ErrorPageComponent\n  },\n  {\n    path: '**',\n    component: SearchResultComponent\n  }\n]\n\nexport const Routing = RouterModule.forRoot(routes, { useHash: true, relativeLinkResolution: 'legacy' })\n\nexport function oauthMatcher (url: UrlSegment[]): UrlMatchResult {\n  if (url.length === 0) {\n    return null as unknown as UrlMatchResult\n  }\n  const path = window.location.href\n  if (path.includes('#access_token=')) {\n    return ({ consumed: url })\n  }\n\n  return null as unknown as UrlMatchResult\n}\n\nexport function tokenMatcher (url: UrlSegment[]): UrlMatchResult {\n  if (url.length === 0) {\n    return null as unknown as UrlMatchResult\n  }\n \n  const path = url[0].toString()\n  // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\n  if (path.match((token1(25, 184, 174, 179, 182, 186) + (36669).toString(36).toLowerCase() + token2(13, 144, 87, 152, 139, 144, 83, 138) + (10).toString(36).toLowerCase()))) {\n    return ({ consumed: url })\n  }\n \n  return null as unknown as UrlMatchResult\n}\n\nexport function token1 (...args: number[]) {\n  const L = Array.prototype.slice.call(args)\n  const D = L.shift()\n  return L.reverse().map(function (C, A) {\n    return String.fromCharCode(C - D - 45 - A)\n  }).join('')\n}\n\nexport function token2 (...args: number[]) {\n  const T = Array.prototype.slice.call(arguments)\n  const M = T.shift()\n  return T.reverse().map(function (m, H) {\n    return String.fromCharCode(m - M - 24 - H)\n  }).join('')\n}</code></pre>","cost":300},{"id":14,"challenge_id":8,"type":"standard","content":"The feature you need to exploit for this challenge is not directly advertised anywhere.","cost":100},{"id":15,"challenge_id":9,"type":"standard","content":"After finding a CAPTCHA bypass, write a script that automates feedback submission. Or open many browser tabs and be really quick.","cost":45},{"id":16,"challenge_id":10,"type":"standard","content":"In previous releases this challenge was wrongly accused of being based on CSRF.","cost":100},{"id":17,"challenge_id":11,"type":"standard","content":"Find out how the application handles unavailable products and try to find a loophole.","cost":70},{"id":18,"challenge_id":12,"type":"standard","content":"What is even \"better\" than a legacy page with a homegrown RegEx sanitizer? Having CSP injection issues on the exact same page as well!","cost":70},{"id":19,"challenge_id":13,"type":"standard","content":"Only some input fields validate their input. Even less of these are persisted in a way where their content is shown on another screen.","cost":45},{"id":20,"challenge_id":14,"type":"standard","content":"Analyze and tamper with links in the application that deliver a file directly.","cost":10},{"id":21,"challenge_id":14,"type":"standard","content":"<pre><code>/* /ftp directory browsing and file download */\n  app.use('/ftp', serveIndexMiddleware, serveIndex('ftp', { icons: true }))\n  app.use('/ftp(?!/quarantine)/:file', fileServer())\n  app.use('/ftp/quarantine/:file', quarantineServer())\n\n  /* /encryptionkeys directory browsing */\n  app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view: 'details' }))\n  app.use('/encryptionkeys/:file', keyServer())\n\n  /* /logs directory browsing */\n  app.use('/support/logs', serveIndexMiddleware, serveIndex('logs', { icons: true, view: 'details' }))\n  app.use('/support/logs/:file', logFileServer())\n\n  /* Swagger documentation for B2B v2 endpoints */\n  app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerDocument))\n\n  app.use(express.static(path.resolve('frontend/dist/frontend')))\n  app.use(cookieParser('kekse'))</code></pre>","cost":30},{"id":22,"challenge_id":15,"type":"standard","content":"Look for an input field where its content appears in the HTML when its form is submitted.","cost":10},{"id":23,"challenge_id":15,"type":"standard","content":"<pre><code>filterTable () {\n    let queryParam: string = this.route.snapshot.queryParams.q\n    if (queryParam) {\n      queryParam = queryParam.trim()\n      this.dataSource.filter = queryParam.toLowerCase()\n      this.searchValue = this.sanitizer.bypassSecurityTrustHtml(queryParam)\n      this.gridDataSource.subscribe((result: any) => {\n        if (result.length === 0) {\n          this.emptyState = true\n        } else {\n          this.emptyState = false\n        }\n      })\n    } else {\n      this.dataSource.filter = ''\n      this.searchValue = undefined\n      this.emptyState = false\n    }\n  }</code></pre>","cost":30},{"id":24,"challenge_id":16,"type":"standard","content":"Find out where this information could come from. Then craft a UNION SELECT attack string against an endpoint that offers an unnecessary way to filter data.","cost":45},{"id":25,"challenge_id":16,"type":"standard","content":"<pre><code>module.exports = function searchProducts () {\n  return (req: Request, res: Response, next: NextFunction) => {\n    let criteria: any = req.query.q === 'undefined' ? '' : req.query.q ?? ''\n    criteria = (criteria.length <= 200) ? criteria : criteria.substring(0, 200)\n    models.sequelize.query(`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`)\n      .then(([products]: any) => {\n        const dataString = JSON.stringify(products)\n        for (let i = 0; i < products.length; i++) {\n          products[i].name = req.__(products[i].name)\n          products[i].description = req.__(products[i].description)\n        }\n        res.json(utils.queryResultToJson(products))\n      }).catch((error: ErrorWithParent) => {\n        next(error.parent)\n      })\n  }\n}</code></pre>","cost":135},{"id":26,"challenge_id":17,"type":"standard","content":"The developers who disabled the interface think they could go invisible by just closing their eyes.","cost":25},{"id":27,"challenge_id":18,"type":"standard","content":"If you solved one of the three file access challenges, you already know where to find the easter egg.","cost":70},{"id":28,"challenge_id":19,"type":"standard","content":"Try to find and attack an endpoint that responds with user information. SQL Injection is not the solution here.","cost":100},{"id":29,"challenge_id":20,"type":"standard","content":"Try to create the needed user \"out of thin air\".","cost":70},{"id":30,"challenge_id":21,"type":"standard","content":"Try to submit bad input to forms. Alternatively tamper with URL paths or parameters.","cost":10},{"id":31,"challenge_id":22,"type":"standard","content":"Try to identify past special event or holiday campaigns of the shop first.","cost":70},{"id":32,"challenge_id":23,"type":"standard","content":"Brute force is not the only option for this challenge, but a perfectly viable one.","cost":100},{"id":33,"challenge_id":24,"type":"standard","content":"Once you found admin section of the application, this challenge is almost trivial.","cost":25},{"id":34,"challenge_id":25,"type":"standard","content":"Try either a) a knowledgable brute force attack or b) reverse engineering or c) some research in the cloud.","cost":135},{"id":35,"challenge_id":26,"type":"standard","content":"You can solve this by tampering with the user interface or by intercepting the communication with the RESTful backend.","cost":45},{"id":36,"challenge_id":27,"type":"standard","content":"Observe the flow of product review posting and editing and see if you can exploit it.","cost":45},{"id":37,"challenge_id":27,"type":"standard","content":"<pre><code>module.exports = function productReviews () {\n  return (req: Request, res: Response, next: NextFunction) => {\n    const user = security.authenticatedUsers.from(req)\n    db.reviews.update(\n      { _id: req.body.id },\n      { $set: { message: req.body.message } },\n      { multi: true }\n    ).then(\n      (result: { modified: number, original: Array<{ author: any }> }) => {\n        res.json(result)\n      }, (err: unknown) => {\n        res.status(500).json(err)\n      })\n  }\n}</code></pre>","cost":135},{"id":38,"challenge_id":28,"type":"standard","content":"This challenge is explicitly not about acquiring the RSA private key used for JWT signing.","cost":135},{"id":39,"challenge_id":29,"type":"standard","content":"You need to trick a security mechanism into thinking that the file you want has a valid file type.","cost":70},{"id":40,"challenge_id":30,"type":"standard","content":"You need to trick a security mechanism into thinking that the file you want has a valid file type.","cost":70},{"id":41,"challenge_id":31,"type":"standard","content":"This challenge has nothing to do with mistyping web domains. There is no conveniently misplaced file helping you with this one either. Or is there?","cost":100},{"id":42,"challenge_id":32,"type":"standard","content":"Turns out that something is technically and legally wrong with the implementation of the \"right to be forgotten\" for users.","cost":45},{"id":43,"challenge_id":33,"type":"standard","content":"Trick the regular Data Export to give you more than actually belongs to you.","cost":70},{"id":44,"challenge_id":34,"type":"standard","content":"Finding a piece of displayed information that could originate from an HTTP header is part of this challenge.","cost":70},{"id":45,"challenge_id":35,"type":"standard","content":"You need to trick the hacking progress persistence feature into thinking you solved challenge #999.","cost":135},{"id":46,"challenge_id":36,"type":"standard","content":"Once you have it, a technique called \"Password Spraying\" might prove useful.","cost":100},{"id":47,"challenge_id":37,"type":"standard","content":"Your own SQLi and someone else's Ctrl-V will be your accomplices in this challenge!","cost":70},{"id":48,"challenge_id":38,"type":"standard","content":"This challenge has nothing to do with mistyping web domains. Investigate the forgotten developer's backup file instead.","cost":70},{"id":49,"challenge_id":39,"type":"standard","content":"Try different SQL Injection attack patterns depending whether you know the admin's email address or not.","cost":25},{"id":50,"challenge_id":39,"type":"standard","content":"<pre><code>module.exports = function login () {\n  function afterLogin (user: { data: User, bid: number }, res: Response, next: NextFunction) {\n    BasketModel.findOrCreate({ where: { UserId: user.data.id } })\n      .then(([basket]: [BasketModel, boolean]) => {\n        const token = security.authorize(user)\n        user.bid = basket.id // keep track of original basket\n        security.authenticatedUsers.put(token, user)\n        res.json({ authentication: { token, bid: basket.id, umail: user.data.email } })\n      }).catch((error: Error) => {\n        next(error)\n      })\n  }\n\n  return (req: Request, res: Response, next: NextFunction) => {\n    models.sequelize.query(`SELECT * FROM Users WHERE email = '${req.body.email || ''}' AND password = '${security.hash(req.body.password || '')}' AND deletedAt IS NULL`, { model: UserModel, plain: true })\n      .then((authenticatedUser: { data: User }) => {\n        const user = utils.queryResultToJson(authenticatedUser)\n        if (user.data?.id && user.data.totpSecret !== '') {\n          res.status(401).json({\n            status: 'totp_token_required',\n            data: {\n              tmpToken: security.authorize({\n                userId: user.data.id,\n                type: 'password_valid_needs_second_factor_token'\n              })\n            }\n          })\n        } else if (user.data?.id) {\n          afterLogin(user, res, next)\n        } else {\n          res.status(401).send(res.__('Invalid email or password.'))\n        }\n      }).catch((error: Error) => {\n        next(error)\n      })\n  }</code></pre>","cost":75},{"id":51,"challenge_id":40,"type":"standard","content":"This challenge will make you go after a needle in a haystack.","cost":45},{"id":52,"challenge_id":41,"type":"standard","content":"If you know Bender's email address, try SQL Injection. Bender's password hash might not help you very much.","cost":45},{"id":53,"challenge_id":41,"type":"standard","content":"<pre><code>module.exports = function login () {\n  function afterLogin (user: { data: User, bid: number }, res: Response, next: NextFunction) {\n    BasketModel.findOrCreate({ where: { UserId: user.data.id } })\n      .then(([basket]: [BasketModel, boolean]) => {\n        const token = security.authorize(user)\n        user.bid = basket.id // keep track of original basket\n        security.authenticatedUsers.put(token, user)\n        res.json({ authentication: { token, bid: basket.id, umail: user.data.email } })\n      }).catch((error: Error) => {\n        next(error)\n      })\n  }\n\n  return (req: Request, res: Response, next: NextFunction) => {\n    models.sequelize.query(`SELECT * FROM Users WHERE email = '${req.body.email || ''}' AND password = '${security.hash(req.body.password || '')}' AND deletedAt IS NULL`, { model: UserModel, plain: true })\n      .then((authenticatedUser: { data: User }) => {\n        const user = utils.queryResultToJson(authenticatedUser)\n        if (user.data?.id && user.data.totpSecret !== '') {\n          res.status(401).json({\n            status: 'totp_token_required',\n            data: {\n              tmpToken: security.authorize({\n                userId: user.data.id,\n                type: 'password_valid_needs_second_factor_token'\n              })\n            }\n          })\n        } else if (user.data?.id) {\n          afterLogin(user, res, next)\n        } else {\n          res.status(401).send(res.__('Invalid email or password.'))\n        }\n      }).catch((error: Error) => {\n        next(error)\n      })\n  }</code></pre>","cost":135},{"id":54,"challenge_id":42,"type":"standard","content":"The security flaw behind this challenge is 100% OWASP Juice Shop's fault and 0% Google's.","cost":70},{"id":55,"challenge_id":43,"type":"standard","content":"Try cracking Jim's password hash if you harvested it already. Alternatively, if you know Jim's email address, try SQL Injection.","cost":45},{"id":56,"challenge_id":43,"type":"standard","content":"<pre><code>module.exports = function login () {\n  function afterLogin (user: { data: User, bid: number }, res: Response, next: NextFunction) {\n    BasketModel.findOrCreate({ where: { UserId: user.data.id } })\n      .then(([basket]: [BasketModel, boolean]) => {\n        const token = security.authorize(user)\n        user.bid = basket.id // keep track of original basket\n        security.authenticatedUsers.put(token, user)\n        res.json({ authentication: { token, bid: basket.id, umail: user.data.email } })\n      }).catch((error: Error) => {\n        next(error)\n      })\n  }\n\n  return (req: Request, res: Response, next: NextFunction) => {\n    models.sequelize.query(`SELECT * FROM Users WHERE email = '${req.body.email || ''}' AND password = '${security.hash(req.body.password || '')}' AND deletedAt IS NULL`, { model: UserModel, plain: true })\n      .then((authenticatedUser: { data: User }) => {\n        const user = utils.queryResultToJson(authenticatedUser)\n        if (user.data?.id && user.data.totpSecret !== '') {\n          res.status(401).json({\n            status: 'totp_token_required',\n            data: {\n              tmpToken: security.authorize({\n                userId: user.data.id,\n                type: 'password_valid_needs_second_factor_token'\n              })\n            }\n          })\n        } else if (user.data?.id) {\n          afterLogin(user, res, next)\n        } else {\n          res.status(401).send(res.__('Invalid email or password.'))\n        }\n      }).catch((error: Error) => {\n        next(error)\n      })\n  }</code></pre>","cost":135},{"id":57,"challenge_id":44,"type":"standard","content":"You should listen to MC's hit song \"Protect Ya Passwordz\".","cost":25},{"id":58,"challenge_id":45,"type":"standard","content":"The underlying flaw of this challenge is a lot more human error than technical weakness.","cost":135},{"id":59,"challenge_id":46,"type":"standard","content":"Have an eye on the HTTP traffic while placing products in the shopping basket. Changing the quantity of products already in the basket doesn't count.","cost":45},{"id":60,"challenge_id":47,"type":"standard","content":"You need to trick a security mechanism into thinking that the file you want has a valid file type.","cost":70},{"id":61,"challenge_id":48,"type":"standard","content":"Punctuality is the politeness of kings.","cost":135},{"id":62,"challenge_id":49,"type":"standard","content":"You might have to peel through several layers of tough-as-nails encryption for this challenge.","cost":70},{"id":63,"challenge_id":50,"type":"standard","content":"This challenge is essentially a stripped-down Denial of Service (DoS) attack.","cost":70},{"id":64,"challenge_id":51,"type":"standard","content":"Take a close look on how the $where query operator works in MongoDB.","cost":100},{"id":65,"challenge_id":52,"type":"standard","content":"Take a close look on how the equivalent of UPDATE-statements in MongoDB work.","cost":70},{"id":66,"challenge_id":52,"type":"standard","content":"<pre><code>module.exports = function productReviews () {\n  return (req: Request, res: Response, next: NextFunction) => {\n    const user = security.authenticatedUsers.from(req)\n    db.reviews.update(\n      { _id: req.body.id },\n      { $set: { message: req.body.message } },\n      { multi: true }\n    ).then(\n      (result: { modified: number, original: Array<{ author: any }> }) => {\n        res.json(result)\n      }, (err: unknown) => {\n        res.status(500).json(err)\n      })\n  }\n}</code></pre>","cost":210},{"id":67,"challenge_id":53,"type":"standard","content":"We might have failed to take this out of our code properly.","cost":10},{"id":68,"challenge_id":53,"type":"standard","content":"<pre><code>const redirectAllowlist = new Set([\n  'https://github.com/bkimminich/juice-shop',\n  'https://blockchain.info/address/1AbKfgvw9psQ41NbLi8kufDQTezwG8DRZm',\n  'https://explorer.dash.org/address/Xr556RzuwX6hg5EGpkybbv5RanJoZN17kW',\n  'https://etherscan.io/address/0x0f933ab9fcaaa782d0279c300d73750e1311eae6',\n  'http://shop.spreadshirt.com/juiceshop',\n  'http://shop.spreadshirt.de/juiceshop',\n  'https://www.stickeryou.com/products/owasp-juice-shop/794',\n  'http://leanpub.com/juice-shop'\n])\nexports.redirectAllowlist = redirectAllowlist\n\nexports.isRedirectAllowed = (url: string) => {\n  let allowed = false\n  for (const allowedUrl of redirectAllowlist) {\n    allowed = allowed || url.includes(allowedUrl)\n  }\n  return allowed\n}</code></pre>","cost":30},{"id":69,"challenge_id":54,"type":"standard","content":"This one should be equally easy to a) brute force, b) crack the password hash or c) simply guess.","cost":25},{"id":70,"challenge_id":55,"type":"standard","content":"You literally need to make the shop owe you any amount of money.","cost":45},{"id":71,"challenge_id":56,"type":"standard","content":"You do not have to pay anything to unlock this challenge! Nonetheless, donations are very much appreciated.","cost":135},{"id":72,"challenge_id":57,"type":"standard","content":"We won't even ask you to confirm that you did. Just read it. Please. Pretty please.","cost":10},{"id":73,"challenge_id":58,"type":"standard","content":"Only by visiting a special URL you can confirm that you read it carefully.","cost":45},{"id":74,"challenge_id":59,"type":"standard","content":"Look for one of the following: a) broken admin functionality, b) holes in RESTful API or c) possibility for SQL Injection.","cost":45},{"id":75,"challenge_id":59,"type":"standard","content":"<pre><code>/** Authorization **/\n  /* Baskets: Unauthorized users are not allowed to access baskets */\n  app.use('/rest/basket', security.isAuthorized(), security.appendUserId())\n  /* BasketItems: API only accessible for authenticated users */\n  app.use('/api/BasketItems', security.isAuthorized())\n  app.use('/api/BasketItems/:id', security.isAuthorized())\n  /* Feedbacks: GET allowed for feedback carousel, POST allowed in order to provide feedback without being logged in */\n  app.use('/api/Feedbacks/:id', security.isAuthorized())\n  /* Users: Only POST is allowed in order to register a new user */\n  app.get('/api/Users', security.isAuthorized())\n  app.route('/api/Users/:id')\n    .get(security.isAuthorized())\n    .put(security.denyAll())\n    .delete(security.denyAll())\n  /* Products: Only GET is allowed in order to view products */\n  app.post('/api/Products', security.isAuthorized())\n  // app.put('/api/Products/:id', security.isAuthorized())\n  app.delete('/api/Products/:id', security.denyAll())\n  /* Challenges: GET list of challenges allowed. Everything else forbidden entirely */\n  app.post('/api/Challenges', security.denyAll())\n  app.use('/api/Challenges/:id', security.denyAll())\n  /* Complaints: POST and GET allowed when logged in only */\n  app.get('/api/Complaints', security.isAuthorized())\n  app.post('/api/Complaints', security.isAuthorized())\n  app.use('/api/Complaints/:id', security.denyAll())\n  /* Recycles: POST and GET allowed when logged in only */\n  app.get('/api/Recycles', recycles.blockRecycleItems())\n  app.post('/api/Recycles', security.isAuthorized())\n  /* Challenge evaluation before finale takes over */\n  app.get('/api/Recycles/:id', recycles.getRecycleItem())\n  app.put('/api/Recycles/:id', security.denyAll())\n  app.delete('/api/Recycles/:id', security.denyAll())\n  /* SecurityQuestions: Only GET list of questions allowed. */\n  app.post('/api/SecurityQuestions', security.denyAll())\n  app.use('/api/SecurityQuestions/:id', security.denyAll())\n  /* SecurityAnswers: Only POST of answer allowed. */\n  app.get('/api/SecurityAnswers', security.denyAll())\n  app.use('/api/SecurityAnswers/:id', security.denyAll())\n  /* REST API */\n  app.use('/rest/user/authentication-details', security.isAuthorized())\n  app.use('/rest/basket/:id', security.isAuthorized())\n  app.use('/rest/basket/:id/order', security.isAuthorized())\n  /* Unauthorized users are not allowed to access B2B API */\n  app.use('/b2b/v2', security.isAuthorized())\n  /* Check if the quantity is available in stock and limit per user not exceeded, then add item to basket */\n  app.put('/api/BasketItems/:id', security.appendUserId(), basketItems.quantityCheckBeforeBasketItemUpdate())\n  app.post('/api/BasketItems', security.appendUserId(), basketItems.quantityCheckBeforeBasketItemAddition(), basketItems.addBasketItem())\n  /* Accounting users are allowed to check and update quantities */\n  app.delete('/api/Quantitys/:id', security.denyAll())\n  app.post('/api/Quantitys', security.denyAll())\n  app.use('/api/Quantitys/:id', security.isAccounting(), ipfilter(['123.456.789'], { mode: 'allow' }))\n  /* Feedbacks: Do not allow changes of existing feedback */\n  app.put('/api/Feedbacks/:id', security.denyAll())\n  /* PrivacyRequests: Only allowed for authenticated users */\n  app.use('/api/PrivacyRequests', security.isAuthorized())\n  app.use('/api/PrivacyRequests/:id', security.isAuthorized())\n  /* PaymentMethodRequests: Only allowed for authenticated users */\n  app.post('/api/Cards', security.appendUserId())\n  app.get('/api/Cards', security.appendUserId(), payment.getPaymentMethods())\n  app.put('/api/Cards/:id', security.denyAll())\n  app.delete('/api/Cards/:id', security.appendUserId(), payment.delPaymentMethodById())\n  app.get('/api/Cards/:id', security.appendUserId(), payment.getPaymentMethodById())\n  /* PrivacyRequests: Only POST allowed for authenticated users */\n  app.post('/api/PrivacyRequests', security.isAuthorized())\n  app.get('/api/PrivacyRequests', security.denyAll())\n  app.use('/api/PrivacyRequests/:id', security.denyAll())\n\n  app.post('/api/Addresss', security.appendUserId())\n  app.get('/api/Addresss', security.appendUserId(), address.getAddress())\n  app.put('/api/Addresss/:id', security.appendUserId())\n  app.delete('/api/Addresss/:id', security.appendUserId(), address.delAddressById())\n  app.get('/api/Addresss/:id', security.appendUserId(), address.getAddressById())\n  app.get('/api/Deliverys', delivery.getDeliveryMethods())\n  app.get('/api/Deliverys/:id', delivery.getDeliveryMethod())</code></pre>","cost":135},{"id":76,"challenge_id":60,"type":"standard","content":"Look for a url parameter where its value appears in the page it is leading to.","cost":25},{"id":77,"challenge_id":61,"type":"standard","content":"You can solve this by cleverly interacting with the UI or bypassing it altogether.","cost":10},{"id":78,"challenge_id":62,"type":"standard","content":"Not as trivial as Jim's but still not too difficult with some \"Futurama\" background knowledge.","cost":70},{"id":79,"challenge_id":62,"type":"standard","content":"<pre><code>-\n  question: 'Your eldest siblings middle name?'\n-\n  question: \"Mother's maiden name?\"\n-\n  question: \"Mother's birth date? (MM/DD/YY)\"\n-\n  question: \"Father's birth date? (MM/DD/YY)\"\n-\n  question: \"Maternal grandmother's first name?\"\n-\n  question: \"Paternal grandmother's first name?\"\n-\n  question: 'Name of your favorite pet?'\n-\n  question: \"Last name of dentist when you were a teenager? (Do not include 'Dr.')\"\n-\n  question: 'Your ZIP/postal code when you were a teenager?'\n-\n  question: 'Company you first work for as an adult?'\n-\n  question: 'Your favorite book?'\n-\n  question: 'Your favorite movie?'\n-\n  question: 'Number of one of your customer or ID cards?'\n-\n  question: \"What's your favorite place to go hiking?\"</code></pre>","cost":210},{"id":80,"challenge_id":63,"type":"standard","content":"Nothing a little bit of Facebook stalking couldn't reveal. Might involve a historical twist.","cost":100},{"id":81,"challenge_id":63,"type":"standard","content":"<pre><code>-\n  question: 'Your eldest siblings middle name?'\n-\n  question: \"Mother's maiden name?\"\n-\n  question: \"Mother's birth date? (MM/DD/YY)\"\n-\n  question: \"Father's birth date? (MM/DD/YY)\"\n-\n  question: \"Maternal grandmother's first name?\"\n-\n  question: \"Paternal grandmother's first name?\"\n-\n  question: 'Name of your favorite pet?'\n-\n  question: \"Last name of dentist when you were a teenager? (Do not include 'Dr.')\"\n-\n  question: 'Your ZIP/postal code when you were a teenager?'\n-\n  question: 'Company you first work for as an adult?'\n-\n  question: 'Your favorite book?'\n-\n  question: 'Your favorite movie?'\n-\n  question: 'Number of one of your customer or ID cards?'\n-\n  question: \"What's your favorite place to go hiking?\"</code></pre>","cost":300},{"id":82,"challenge_id":64,"type":"standard","content":"It's hard for celebrities to pick a security question from a hard-coded list where the answer is not publicly exposed.","cost":45},{"id":83,"challenge_id":64,"type":"standard","content":"<pre><code>-\n  question: 'Your eldest siblings middle name?'\n-\n  question: \"Mother's maiden name?\"\n-\n  question: \"Mother's birth date? (MM/DD/YY)\"\n-\n  question: \"Father's birth date? (MM/DD/YY)\"\n-\n  question: \"Maternal grandmother's first name?\"\n-\n  question: \"Paternal grandmother's first name?\"\n-\n  question: 'Name of your favorite pet?'\n-\n  question: \"Last name of dentist when you were a teenager? (Do not include 'Dr.')\"\n-\n  question: 'Your ZIP/postal code when you were a teenager?'\n-\n  question: 'Company you first work for as an adult?'\n-\n  question: 'Your favorite book?'\n-\n  question: 'Your favorite movie?'\n-\n  question: 'Number of one of your customer or ID cards?'\n-\n  question: \"What's your favorite place to go hiking?\"</code></pre>","cost":135},{"id":84,"challenge_id":65,"type":"standard","content":"Find a way to bypass the rate limiting and brute force the obfuscated answer to Morty's security question.","cost":100},{"id":85,"challenge_id":65,"type":"standard","content":"<pre><code>/* Rate limiting */\n  app.enable('trust proxy')\n  app.use('/rest/user/reset-password', new RateLimit({\n    windowMs: 5 * 60 * 1000,\n    max: 100,\n    keyGenerator ({ headers, ip }: { headers: any, ip: any }) { return headers['X-Forwarded-For'] || ip }\n  }))</code></pre>","cost":300},{"id":86,"challenge_id":66,"type":"standard","content":"The product you might want to give a closer look is the OWASP Juice Shop Logo (3D-printed).","cost":100},{"id":87,"challenge_id":67,"type":"standard","content":"Reverse engineering something bad can make good things happen.","cost":135},{"id":88,"challenge_id":68,"type":"standard","content":"\"SSTi\" is a clear indicator that this has nothing to do with anything Angular. Also, make sure to use only our non-malicious malware.","cost":135},{"id":89,"challenge_id":69,"type":"standard","content":"Try to find a reference or clue behind the scenes. Or simply guess what URL the Score Board might have.","cost":10},{"id":90,"challenge_id":69,"type":"standard","content":"<pre><code>const routes: Routes = [\n  {\n    path: 'administration',\n    component: AdministrationComponent,\n    canActivate: [AdminGuard]\n  },\n  {\n    path: 'accounting',\n    component: AccountingComponent,\n    canActivate: [AccountingGuard]\n  },\n  {\n    path: 'about',\n    component: AboutComponent\n  },\n  {\n    path: 'address/select',\n    component: AddressSelectComponent,\n    canActivate: [LoginGuard]\n  },\n  {\n    path: 'address/saved',\n    component: SavedAddressComponent,\n    canActivate: [LoginGuard]\n  },\n  {\n    path: 'address/create',\n    component: AddressCreateComponent,\n    canActivate: [LoginGuard]\n  },\n  {\n    path: 'address/edit/:addressId',\n    component: AddressCreateComponent,\n    canActivate: [LoginGuard]\n  },\n  {\n    path: 'delivery-method',\n    component: DeliveryMethodComponent\n  },\n  {\n    path: 'deluxe-membership',\n    component: DeluxeUserComponent,\n    canActivate: [LoginGuard]\n  },\n  {\n    path: 'saved-payment-methods',\n    component: SavedPaymentMethodsComponent\n  },\n  {\n    path: 'basket',\n    component: BasketComponent\n  },\n  {\n    path: 'order-completion/:id',\n    component: OrderCompletionComponent\n  },\n  {\n    path: 'contact',\n    component: ContactComponent\n  },\n  {\n    path: 'photo-wall',\n    component: PhotoWallComponent\n  },\n  {\n    path: 'complain',\n    component: ComplaintComponent\n  },\n  {\n    path: 'chatbot',\n    component: ChatbotComponent\n  },\n  {\n    path: 'order-summary',\n    component: OrderSummaryComponent\n  },\n  {\n    path: 'order-history',\n    component: OrderHistoryComponent\n  },\n  {\n    path: 'payment/:entity',\n    component: PaymentComponent\n  },\n  {\n    path: 'wallet',\n    component: WalletComponent\n  },\n  {\n    path: 'login',\n    component: LoginComponent\n  },\n  {\n    path: 'forgot-password',\n    component: ForgotPasswordComponent\n  },\n  {\n    path: 'recycle',\n    component: RecycleComponent\n  },\n  {\n    path: 'register',\n    component: RegisterComponent\n  },\n  {\n    path: 'search',\n    component: SearchResultComponent\n  },\n  {\n    path: 'hacking-instructor',\n    component: SearchResultComponent\n  },\n  {\n    path: 'score-board',\n    component: ScoreBoardComponent\n  },\n  {\n    path: 'track-result',\n    component: TrackResultComponent\n  },\n  {\n    path: 'track-result/new',\n    component: TrackResultComponent,\n    data: {\n      type: 'new'\n    }\n  },\n  {\n    path: '2fa/enter',\n    component: TwoFactorAuthEnterComponent\n  },\n  {\n    path: 'privacy-security',\n    component: PrivacySecurityComponent,\n    children: [\n      {\n        path: 'privacy-policy',\n        component: PrivacyPolicyComponent\n      },\n      {\n        path: 'change-password',\n        component: ChangePasswordComponent\n      },\n      {\n        path: 'two-factor-authentication',\n        component: TwoFactorAuthComponent\n      },\n      {\n        path: 'data-export',\n        component: DataExportComponent\n      },\n      {\n        path: 'last-login-ip',\n        component: LastLoginIpComponent\n      }\n    ]\n  },\n   {\n    matcher: oauthMatcher,\n    data: { params: (window.location.href).substr(window.location.href.indexOf('#')) },\n    component: OAuthComponent\n  },\n  {\n    matcher: tokenMatcher,\n    component: TokenSaleComponent\n  },\n  {\n    path: '403',\n    component: ErrorPageComponent\n  },\n  {\n    path: '**',\n    component: SearchResultComponent\n  }\n]</code></pre>","cost":30},{"id":91,"challenge_id":70,"type":"standard","content":"Undoubtably you want to read our security policy before conducting any research on our application.","cost":25},{"id":92,"challenge_id":71,"type":"standard","content":"The \"Comment\" field in the \"Customer Feedback\" screen is where you want to put your focus on.","cost":70},{"id":93,"challenge_id":72,"type":"standard","content":"No matter how good your eyes are, you will need tool assistance for this challenge.","cost":70},{"id":94,"challenge_id":73,"type":"standard","content":"Your attack payload must not trigger the protection against too many iterations.","cost":135},{"id":95,"challenge_id":74,"type":"standard","content":"This vulnerability will not affect any customer of the shop. It is aimed exclusively at its developers.","cost":100},{"id":96,"challenge_id":75,"type":"standard","content":"The 2FA implementation requires to store a secret for every user. You will need to find a way to access this secret in order to solve this challenge.","cost":100},{"id":97,"challenge_id":76,"type":"standard","content":"This challenge exploits a weird option that is supported when signing tokens with JWT.","cost":100},{"id":98,"challenge_id":77,"type":"standard","content":"You can attach a small file to the \"Complaint\" form. Investigate how this upload actually works.","cost":45},{"id":99,"challenge_id":78,"type":"standard","content":"You can attach a PDF or ZIP file to the \"Complaint\" form. Investigate how this upload actually works.","cost":45},{"id":100,"challenge_id":79,"type":"standard","content":"Gather information on where user data is stored and how it is addressed. Then craft a corresponding UNION SELECT attack.","cost":70},{"id":101,"challenge_id":79,"type":"standard","content":"<pre><code>module.exports = function searchProducts () {\n  return (req: Request, res: Response, next: NextFunction) => {\n    let criteria: any = req.query.q === 'undefined' ? '' : req.query.q ?? ''\n    criteria = (criteria.length <= 200) ? criteria : criteria.substring(0, 200)\n    models.sequelize.query(`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`)\n      .then(([products]: any) => {\n        const dataString = JSON.stringify(products)\n        for (let i = 0; i < products.length; i++) {\n          products[i].name = req.__(products[i].name)\n          products[i].description = req.__(products[i].description)\n        }\n        res.json(utils.queryResultToJson(products))\n      }).catch((error: ErrorWithParent) => {\n        next(error.parent)\n      })\n  }\n}</code></pre>","cost":210},{"id":102,"challenge_id":80,"type":"standard","content":"You have to reuse the vulnerability behind one other 6-star challenge to be able to solve this one.","cost":135},{"id":103,"challenge_id":81,"type":"standard","content":"Have an eye on the HTTP traffic while shopping. Alternatively try to find a client-side association of users to their basket.","cost":25},{"id":104,"challenge_id":82,"type":"standard","content":"Report one of two possible answers via the \"Customer Feedback\" form. Do not forget to submit the library's version as well.","cost":70},{"id":105,"challenge_id":83,"type":"standard","content":"Report one of four possible answers via the \"Customer Feedback\" form.","cost":25},{"id":106,"challenge_id":84,"type":"standard","content":"You have to find a way to beat the allowlist of allowed redirect URLs.","cost":70},{"id":107,"challenge_id":84,"type":"standard","content":"<pre><code>const redirectAllowlist = new Set([\n  'https://github.com/bkimminich/juice-shop',\n  'https://blockchain.info/address/1AbKfgvw9psQ41NbLi8kufDQTezwG8DRZm',\n  'https://explorer.dash.org/address/Xr556RzuwX6hg5EGpkybbv5RanJoZN17kW',\n  'https://etherscan.io/address/0x0f933ab9fcaaa782d0279c300d73750e1311eae6',\n  'http://shop.spreadshirt.com/juiceshop',\n  'http://shop.spreadshirt.de/juiceshop',\n  'https://www.stickeryou.com/products/owasp-juice-shop/794',\n  'http://leanpub.com/juice-shop'\n])\nexports.redirectAllowlist = redirectAllowlist\n\nexports.isRedirectAllowed = (url: string) => {\n  let allowed = false\n  for (const allowedUrl of redirectAllowlist) {\n    allowed = allowed || url.includes(allowedUrl)\n  }\n  return allowed\n}</code></pre>","cost":210},{"id":108,"challenge_id":85,"type":"standard","content":"The leverage point for this challenge is the deprecated B2B interface.","cost":45},{"id":109,"challenge_id":86,"type":"standard","content":"It is not as easy as sending a large amount of data directly to the deprecated B2B interface.","cost":100},{"id":110,"challenge_id":87,"type":"standard","content":"Before you invest time bypassing the API, you might want to play around with the UI a bit.","cost":10},{"id":111,"challenge_id":88,"type":"standard","content":"Check the Photo Wall for an image that could not be loaded correctly.","cost":10},{"id":112,"challenge_id":89,"type":"standard","content":"This challenge would formally have to be in several categories as the developers made multiple gaffes for this to be possible.","cost":100},{"id":113,"challenge_id":90,"type":"standard","content":"Try to guess what URL the endpoint might have.","cost":10},{"id":114,"challenge_id":90,"type":"standard","content":"<pre><code>/* Serve metrics */\nconst Metrics = metrics.observeMetrics()\nconst metricsUpdateLoop = Metrics.updateLoop\napp.get('/metrics', metrics.serveMetrics())\nerrorhandler.title = `${config.get('application.name')} (Express ${utils.version('express')})`\n\nconst registerWebsocketEvents = require('./lib/startup/registerWebsocketEvents')\nconst customizeApplication = require('./lib/startup/customizeApplication')\nexport async function start (readyCallback: Function) {\n  const datacreatorEnd = startupGauge.startTimer({ task: 'datacreator' })\n  await sequelize.sync({ force: true })\n  await datacreator()\n  datacreatorEnd()\n  const port = process.env.PORT ?? config.get('server.port')\n  process.env.BASE_PATH = process.env.BASE_PATH ?? config.get('server.basePath')\n\n  server.listen(port, () => {\n    logger.info(colors.cyan(`Server listening on port ${colors.bold(port)}`))\n    startupGauge.set({ task: 'ready' }, (Date.now() - startTime) / 1000)\n    if (process.env.BASE_PATH !== '') {\n      logger.info(colors.cyan(`Server using proxy base path ${colors.bold(process.env.BASE_PATH)} for redirects`))\n    }\n    registerWebsocketEvents(server)\n    if (readyCallback) {\n      readyCallback()\n    }\n  })\n\n}\n\nexport function close (exitCode: number | undefined) {\n  if (server) {\n    clearInterval(metricsUpdateLoop)\n    server.close()\n  }\n  if (exitCode !== undefined) {\n    process.exit(exitCode)\n  }\n}</code></pre>","cost":30},{"id":115,"challenge_id":91,"type":"standard","content":"Look closely at what happens when you attempt to upgrade your account.","cost":45},{"id":116,"challenge_id":92,"type":"standard","content":"Find a form which updates the username and then construct a malicious page in the online HTML editor.","cost":45},{"id":117,"challenge_id":93,"type":"standard","content":"Copy + Paste = Solved!","cost":10},{"id":118,"challenge_id":93,"type":"standard","content":"<pre><code>filterTable () {\n    let queryParam: string = this.route.snapshot.queryParams.q\n    if (queryParam) {\n      queryParam = queryParam.trim()\n      this.dataSource.filter = queryParam.toLowerCase()\n      this.searchValue = this.sanitizer.bypassSecurityTrustHtml(queryParam)\n      this.gridDataSource.subscribe((result: any) => {\n        if (result.length === 0) {\n          this.emptyState = true\n        } else {\n          this.emptyState = false\n        }\n      })\n    } else {\n      this.dataSource.filter = ''\n      this.searchValue = undefined\n      this.emptyState = false\n    }\n  }</code></pre>","cost":30},{"id":119,"challenge_id":94,"type":"standard","content":"You might have to do some OSINT on his social media personas to find out his honest answer to the security question.","cost":70},{"id":120,"challenge_id":94,"type":"standard","content":"<pre><code>-\n  question: 'Your eldest siblings middle name?'\n-\n  question: \"Mother's maiden name?\"\n-\n  question: \"Mother's birth date? (MM/DD/YY)\"\n-\n  question: \"Father's birth date? (MM/DD/YY)\"\n-\n  question: \"Maternal grandmother's first name?\"\n-\n  question: \"Paternal grandmother's first name?\"\n-\n  question: 'Name of your favorite pet?'\n-\n  question: \"Last name of dentist when you were a teenager? (Do not include 'Dr.')\"\n-\n  question: 'Your ZIP/postal code when you were a teenager?'\n-\n  question: 'Company you first work for as an adult?'\n-\n  question: 'Your favorite book?'\n-\n  question: 'Your favorite movie?'\n-\n  question: 'Number of one of your customer or ID cards?'\n-\n  question: \"What's your favorite place to go hiking?\"</code></pre>","cost":210},{"id":121,"challenge_id":95,"type":"standard","content":"Take a look at the meta data of the corresponding photo.","cost":25},{"id":122,"challenge_id":96,"type":"standard","content":"Take a look at the details in the photo to determine the location of where it was taken.","cost":25},{"id":123,"challenge_id":97,"type":"standard","content":"Think of a way to get a hold of the internal workings on the chatbot API.","cost":100},{"id":124,"challenge_id":98,"type":"standard","content":"Take a look at the details in the photo to determine the location of where it was taken.","cost":70},{"id":125,"challenge_id":99,"type":"standard","content":"Just keep asking.","cost":10},{"id":126,"challenge_id":100,"type":"standard","content":"You should read up on vulnerabilities in popular NodeJs template engines.","cost":100},{"id":127,"challenge_id":101,"type":"standard","content":"See the challenge text. ","cost":45},{"id":128,"challenge_id":102,"type":"standard","content":"See the challenge text. ","cost":45},{"id":129,"challenge_id":103,"type":"standard","content":"See the challenge text. ","cost":45},{"id":130,"challenge_id":104,"type":"standard","content":"See the challenge text. ","cost":45}]}